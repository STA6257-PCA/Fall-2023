---
title: "toggle"
format: 
  html:
    css: css/toggle.css
---

## Load Libraries

```{r, message=FALSE, warning=FALSE}
library(htmlwidgets)
library(htmltools)
library(tidyverse)
```

Trying CSS slider switch


```{r, echo=FALSE, results='hide'}
# clear environment
rm(list = ls())

# Load dataset
train_original <- read.csv('dataset/DFC_STATE.csv')

# Make a working copy
train_data <- train_original

# Remove categorical columns
train_data$State <- NULL

# Impute missing values with the mean
for (col in colnames(train_data)) {
  mean_value <- mean(train_data[[col]], na.rm = TRUE)
  train_data[[col]] <- ifelse(is.na(train_data[[col]]), mean_value,     train_data[[col]])
}

# Find the index position of the target feature 
target_name <- "expected_survival"
target_index <- grep(target_name,
                     colnames(train_data))

# Constant seed
my_seed = 95

# Summary statistics of the data
train_summary <- summary(train_data)
# train_summary <- t(train_summary)
train_summary_html <- as.character(train_summary)
# Capture the HTML of the training summary
train_summary_html <- htmltools::HTML(train_summary_html)
```

```{r, message=FALSE, warning=FALSE}
library(kableExtra)
# Style the summary table using kableExtra functions
styled_train_summary <- kbl(train_summary, format = "html") %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 14)

# Capture the HTML of the styled training summary
styled_train_summary_html <- htmltools::HTML(as.character(styled_train_summary))
```

### Correlations
```{r, message=FALSE, warning=FALSE}
library(caret)
# Calculate correlations and round to 2 digits
corr_matrix <- cor(train_data)
corr_matrix <- round(corr_matrix, digits = 2)

# Print names of highly correlated features; threshold > 0.30
high <- findCorrelation(corr_matrix, cutoff = 0.30, names = TRUE)

# Create a data frame with an index column
high_corr_df <- data.frame(
  Count = 1:length(high),
  Feature = high
)

# table format
correlations_table <- kbl(high_corr_df, caption = "Highly Correlated Features") %>%
  kable_paper("hover")


# Capture the HTML of the styled training summary
styled_correlations_table_html <- htmltools::HTML(as.character(correlations_table))
```


### Styled Summary

```{r}
# styled <- sprintf('
# <div class="switch">
#   <input type="checkbox" id="toggleSwitch">
#   <label class="slider round" for="toggleSwitch"></label>
# </div>
# 
# <div id="result-container">
#   <p id="result">Result: </p>
#   <div id="trainSummaryTable" style="display: none;">%s</div>
# </div>
# 
# <script>
# document.getElementById("toggleSwitch").addEventListener("change", function() {
#   toggleResult();
# });
# 
# function toggleResult() {
#   var resultContainer = document.getElementById("result-container");
#   var trainSummaryTable = document.getElementById("trainSummaryTable");
#   var toggleSwitch = document.getElementById("toggleSwitch");
# 
#   if (toggleSwitch.checked) {
#     resultContainer.style.display = "block";
#     trainSummaryTable.style.display = "block";
#   } else {
#     resultContainer.style.display = "none";
#     trainSummaryTable.style.display = "none";
#   }
# }
# </script>
# ', styled_train_summary_html)
# 
# htmltools::HTML(styled)
```

### Correlations
```{r}
styled_corr <- sprintf('
<div class="switch">
<p id="result-corr">Show Results: </p>  
<input type="checkbox" id="toggleCorr">
  <label class="slider round" for="toggleCorr"></label>
</div>

<div id="result-container-correlations">
  
  <div id="corrTable" style="display: none;">%s</div>
</div>

<script>
document.getElementById("toggleCorr").addEventListener("change", function() {
  toggleCorrResult();
});

function toggleCorrResult() {
  var resultContainer = document.getElementById("result-container-correlations");
  var corrTable = document.getElementById("corrTable");
  var corrSwitch = document.getElementById("toggleCorr");

  if (corrSwitch.checked) {
    resultContainer.style.display = "block";
    corrTable.style.display = "block";
  } else {
    resultContainer.style.display = "none";
    corrTable.style.display = "none";
  }
}
</script>', styled_correlations_table_html)

htmltools::HTML(styled_corr)
```
## Function with one parameter
```{r}
high_corr <- sprintf('
<div class="switch" id="toggleSwitchCorr">
  <p id="result-Corr">Result: </p>  
  <input type="checkbox" id="toggleSwitchCorr">
  <label class="slider round" for="toggleSwitchCorr"></label>
</div>

<div id="result-container-Corr">
  
  <div id="CorrTable" style="display: none;">%s</div>
</div>

<script>
document.getElementById("toggleSwitchCorr").addEventListener("change", function() {
  toggleResult("Corr");
});

function toggleResult(resultType) {
  var resultContainer = document.getElementById("result-container-" + resultType);
  var resultTable = document.getElementById(resultType + "Table");
  var toggleSwitch = document.getElementById("toggleSwitch" + resultType);

  if (toggleSwitch.checked) {
    resultContainer.style.display = "block";
    resultTable.style.display = "block";
  } else {
    resultContainer.style.display = "none";
    resultTable.style.display = "none";
  }
}
</script>
', styled_correlations_table_html)

htmltools::HTML(high_corr)
```



```{r, warning=FALSE, message=FALSE}
library(sjPlot)
set.seed(my_seed)

# Fit a multiple linear regression model
full_model <- lm(train_data$Survival..As.Expected..STATE. ~ ., data = train_data)

# Print a summary of the regression model
print_full_model <- tab_model(full_model, title = "Full Model Regression", 
          string.p="P-value", string.stat = "T-score",
          string.se = "Std. Error",
          string.resp = "Response",
          string.ci = "Conf Int.",
          show.se=T, show.stat = T,
           CSS = list(
             css.depvarhead = 'font-weight: bold; text-align: left;',
             css.summary = 'color: #10759B; font-weight: bold;'
           ))

# Capture the HTML of the styled training summary
styled_regression_model_html <- htmltools::HTML(as.character(print_full_model))
```

## full model
```{r}
fmodel <- sprintf('
<div class="switch">
  <input type="checkbox" id="fullSwitch">
  <label class="slider round" for="fullSwitch"></label>
</div>

<div id="result-container-full">
  <p id="result-full">Result: </p>
  <div id="fullTable" style="display: none;">%s</div>
</div>

<script>
document.getElementById("fullSwitch").addEventListener("change", function() {
  toggleFullResult();
});

function toggleFullResult() {
  var resultContainer = document.getElementById("result-container-full");
  var table = document.getElementById("fullTable");
  var switchCheckbox = document.getElementById("fullSwitch");

  if (switchCheckbox.checked) {
    resultContainer.style.display = "block";
    table.style.display = "block";
  } else {
    resultContainer.style.display = "none";
    table.style.display = "none";
  }
}
</script>
', styled_regression_model_html)
# htmltools::HTML(fmodel)

```



```{r, warning=FALSE, message=FALSE}
# full_model_html <- sprintf('
# <div class="switch">
#   <input type="checkbox" id="toggleSwitchRegressionModel">
#   <label class="slider round" for="toggleSwitchRegressionModel"></label>
# </div>
# 
# <div id="result-container-fullmodel">
#   <p id="result-fullmodel">Result: </p>
#   <div id="fullmodelTable" style="display: none;">%s</div>
# </div>
# 
# <script>
# var isTableRendered = false;
# 
# document.getElementById("toggleSwitchRegressionModel").addEventListener("change", function() {
#   toggleResult();
# });
# 
# function toggleResult() {
#   var resultContainer = document.getElementById("result-container-fullmodel");
#   var Table = document.getElementById("fullmodelTable");
#   var switchCheckbox = document.getElementById("toggleSwitchRegressionModel");
# 
#   if (switchCheckbox.checked && !isTableRendered) {
#     resultContainer.style.display = "block";
#     Table.style.display = "block";
#     
#     // Render the table only once
#     isTableRendered = true;
#   } else {
#     resultContainer.style.display = "none";
#     Table.style.display = "none";
#   }
# }
# </script>', styled_regression_model_html)

# htmltools::HTML(full_model_html)

```


