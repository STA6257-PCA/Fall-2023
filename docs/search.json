[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Principal Component Analysis",
    "section": "",
    "text": "Home\n\n\n\n\n\nIn recent times, the utilization of large datasets has become widespread across numerous fields. To confront the challenges posed by these complex datasets with multiple variables, unsupervised learning algorithms, particularly Principal Component Analysis (PCA), assume a crucial role in various tasks such as dimensionality reduction, feature extraction, and data visualization. The roots of PCA can be traced back to Karl Pearson’s conceptualization in 1901, with subsequent formalization by Harold Hotelling in 1933. PCA’s primary objective is to reduce data dimensionality while preserving its inherent variability. It achieves this by generating principal components, which serve as representatives for variables, thereby simplifying data representation and enhancing exploratory data analysis. The underlying mathematical framework of PCA revolves around identifying eigenvectors and eigenvalues of the covariance matrix. With the development of software packages, PCA has become easily accessible for data analysis. However, PCA is most effective when data patterns result in statistical variance that can be captured by the principal components, making it a potent tool for data exploration but less suitable for non-linear or non-orthogonal data. Careful consideration must be given to proper data scaling. PCA finds application in diverse fields such as archaeology, neuroscience, and the arts, enabling practitioners to explore datasets, preprocess data, and streamline analysis. Moreover, it has found utility in computer vision for tasks like facial recognition, showcasing its prowess in reducing dimensionality while preserving crucial information. Overall, PCA is a versatile and widely used technique in statistics and data analysis, providing a valuable means to extract insights from complex datasets and simplify decision-making processes across diverse domains."
  },
  {
    "objectID": "intro.html#theoretical-and-mathematical-foundations",
    "href": "intro.html#theoretical-and-mathematical-foundations",
    "title": "1  Introduction",
    "section": "1.1 Theoretical and mathematical foundations",
    "text": "1.1 Theoretical and mathematical foundations\nThe fundamental concept behind PCA is to explain the variability in a set of correlated variables with a smaller set of uncorrelated variables, thus mitigating issues such as multicollinearity. The geometric properties of PCs facilitate an intuitive interpretation of key features within complex multivariate datasets [8]; the first principal component represents the direction with the greatest variation in the original data, while subsequent components are uncorrelated with the previous ones. Each component can be interpreted as the direction that maximizes the variance of the original data when projecting new observations onto the components [1]. PCA aims to capture a significant proportion of the original variables’ variation in the first few components, offering a practical lower-dimensional summary. While other methods may involve weighted averages across related variables to reduce dimensions, PCA often achieves similar results with minimal loss of variance information [9]. The mathematical foundations of PCA center around data of \\(p\\) variables in \\(n\\) observations, represented by an \\(n \\times p\\) matrix \\(X\\) with the goal of finding a linear combination of the columns of \\(X\\) which maximize variance. By maximizing the variance in these linear combinations, we can capture the largest amount of statistical information possible among the dimensions of the dataset. As described by Jolliffe and Cadima [2], this boils down to finding the eigenvectors (\\(a\\)) and the largest eigenvalues (\\(\\lambda\\)) of the covariance matrix \\(S\\), where \\(Xa_k\\) are the linear combinations called the principal components.\nWith the development of software packages in computer languages such as R and Python, the computational burden of PCA for large datasets can be easily handled by software; PCA has become easy to use as part of any data processing pipeline. Abdi and Williams describe PCA as “probably the most popular multivariate statistical technique … used by almost all scientific disciplines.” [10] Abdi and Williams also emphasize that the goals of PCA should be extracting only the most important information from a dataset to both compress and simplify the dataset and provide a way to analyze the structure of the observations and variables more easily. Importantly, the authors also offer a geometric description of the principal components as orthogonal factors to the original axis of the dataset; another strength of PCA is the fact that the technique can be explained and expressed through several mathematical avenues. Finally, Abdi and Williams offer methods to evaluate the quality of the “PCA model” in reconstructing the original data matrix using the derived principal components. For example, calculating the residual sum of squares, or RESS, after rebuilding X provides a way to identify model accuracy by seeking a minimal RESS value from X and X. \nLever and Altman [11] offer similar praises of PCA while echoing the cautions of prior authors as a powerful data exploration tool with clear limitations. PCA is best when interesting patterns in data produce statistical variance which can be capture by the principal components, but the technique is far less effective when patterns in data are non-linear or non-orthogonal or when the maximization of variance fails to produce interesting clusters in the principal component space. Scaling is often necessary for PCA to ensure compatibility across variables with different scales and ranges. The original data is typically standardized to have a mean of 0 and a variance of 1 [8]. PCA can be used improperly to produce results that obfuscate the actual statistical content of the dataset; scaling may influence the analysis with prior knowledge of the data, so the decision to scale the data and the scaling methodology should be considered carefully."
  },
  {
    "objectID": "intro.html#applications-and-extensions",
    "href": "intro.html#applications-and-extensions",
    "title": "1  Introduction",
    "section": "1.2 Applications and extensions",
    "text": "1.2 Applications and extensions\n\n1.2.1 In Archeology, Neuroscience, and the Arts\nPCA has been utilized by many authors across numerous fields as an essential part of a data analysis pipeline. As an example of the application of PCA, Jolliffe and Cadima [2] present a dataset of 88 observations with 9 variables of measurement for fossilized mammal teeth including length in two dimensions, width in two dimensions, and more. With the R statistical language, finding and displaying the principal components of the dataset becomes trivial work where patterns can be identified graphically in a two-dimensional (PC1 x PC2) plot, versus the original scatterplot which would be displayed in nine-dimensional space. The development of statistical software has made it straightforward for practitioners to use PCA for data exploration and dimensionality reduction. Authors such as Maindonald and Braun [12] have produced publications which present techniques and step-by-step methodologies of using R to calculate principal components and graphically display the results. Their presentation includes code snippets which can be run in R software environments along with worked examples and a discussion of results, facilitating the use of the technique for practitioners of all experience levels.\nFelipe Gewers and their research team directly expound on Abdi and Williams’ description of PCA as “the most popular multivariate statistical technique [...]” in an analysis of publications which use PCA: Across twenty-three disciplines ranging from Neuroscience to the Arts, PCA is used to explore a dataset before analysis, used as part of a spectrum of statistical analysis tools prior to modeling and analysis, or used to preprocess and simplify data for direct analysis and modeling [13]. The authors also discuss the broad effectiveness of PCA in representing more than 50% of the variance in most datasets using only the first three principal components. They also highlight how differences in captured variance appear between standardization and non-standardization, and in different fields of study; PCA can be effective in an incredibly diverse array of data when applied appropriately. As an exploratory technique with a long tenure in the field of statistics and data analysis, PCA is tried and true in simplifying datasets and allowing practitioners to identify and explore the largest sources of statistical information present in their data.\nPrincipal Component Analysis is also implemented in Scikit Learn with randomized Singular Value Decomposition (SVD) for dimensionality reduction in data analysis, particularly for face recognition and similar high-dimensional data applications. For instance, with an image of 4096 dimensions (64x64 pixel gray scale images) PCA can transform the data into a lower 200 dimension format that still captures the essential information [14]. With randomized SVD it becomes computationally more efficient to approximate the singular vectors, which are then used to perform the transformation. This approach significantly reduces computation time and memory usage. Additionally, PCA decomposes a multivariate dataset into orthogonal components that explain the maximum amount of variance. It can center and optionally scale the input data before applying SVD. Scaling can be useful for downstream models, such as Support Vector Machines with the RBF kernel and K-Means clustering, which assume certain properties of the data distribution.\n\n\n1.2.2 Computer Vision and Pattern Recognition\nThe Eigenfaces concept has emerged as a groundbreaking approach to facial detection and recognition. The Eigenfaces algorithm employs PCA to extract essential facial features, reducing the dimensionality of face images while retaining crucial information. The Eigenfaces technique represents facial images in high-dimensional space while projecting the images onto a lower-dimensional space. Turk and Pentland demonstrated the effectiveness of Eigenfaces in recognizing faces under various conditions, including variations in lighting, facial expressions, and pose [15]. The potential implications of this research extend beyond face recognition, and have broader implications for image analysis, computer vision, and biometric systems. The paper Eigenfaces by Zhang and Turk provided an insightful exploration of the Eigenfaces method [16], considered as the first working technique in facial recognition. Eigenfaces leverage the power of PCA to represent facial images compactly and efficiently, making it possible to recognize faces in various contexts.\nThe idea of principal components to represent human faces was developed by Sirovich and Kirby in 1987 and used by Turk and Pentland in 1991 [15] for face detection and recognition. The authors describe the mathematical principles behind PCA, and its adaptation for facial recognition, capturing the most prominent facial features while reducing the dimensionality of the data. Specifically, the eigenfaces are the principal components of a distribution of faces, or the eigenvectors of the covariance matrix of the set of face images, where an image with N pixels is considered a point (or vector) in N-dimensional space. Emphasis is placed on the versatility of Eigenfaces in handling variations in lighting, pose, and facial expressions, making it a robust tool for real-world applications.\nThis application of PCA represents one of many for a longstanding technique in the rapidly growing field of statistics and data analysis. The unsupervised learning algorithm plays a vital role in dimensionality reduction, feature extraction, and visualization of complex data sets. Understanding PCA is crucial for researchers, and students seeking to extract meaningful insights and patterns from high-dimensional data to simplify the decision-making process.\n\n\n\n\n[1] M. Ringnér, “What is principal component analysis?” Nature biotechnology, vol. 26, no. 3, pp. 303–304, 2008.\n\n\n[2] I. T. Jolliffe and J. Cadima, “Principal component analysis: A review and recent developments,” Philosophical transactions of the royal society A: Mathematical, Physical and Engineering Sciences, vol. 374, no. 2065, p. 20150202, 2016.\n\n\n[3] D. Esposito and F. Esposito, Introducing machine learning. Microsoft Press, 2020.\n\n\n[4] B. M. S. Hasan and A. M. Abdulazeez, “A review of principal component analysis algorithm for dimensionality reduction,” Journal of Soft Computing and Data Mining, vol. 2, no. 1, pp. 20–30, 2021.\n\n\n[5] K. Pearson, “LIII. On lines and planes of closest fit to systems of points in space,” The London, Edinburgh, and Dublin philosophical magazine and journal of science, vol. 2, no. 11, pp. 559–572, 1901.\n\n\n[6] H. Hotelling, “Analysis of a complex of statistical variables into principal components.” Journal of educational psychology, vol. 24, no. 6, p. 417, 1933.\n\n\n[7] R. A. Fisher and W. A. Mackenzie, “Studies in crop variation. II. The manurial response of different potato varieties,” The Journal of Agricultural Science, vol. 13, no. 3, pp. 311–320, 1923.\n\n\n[8] M. Greenacre, P. J. Groenen, T. Hastie, A. I. d’Enza, A. Markos, and E. Tuzhilina, “Principal component analysis,” Nature Reviews Methods Primers, vol. 2, no. 1, p. 100, 2022.\n\n\n[9] B. Everitt and T. Hothorn, An introduction to applied multivariate analysis with r. Springer Science & Business Media, 2011.\n\n\n[10] H. Abdi and L. J. Williams, “Principal component analysis,” WIREs Computational Statistics, vol. 2, no. 4, pp. 433–459, 2010, doi: https://doi.org/10.1002/wics.101. Available: https://wires.onlinelibrary.wiley.com/doi/abs/10.1002/wics.101\n\n\n[11] J. Lever, M. Krzywinski, and N. Altman, “Points of significance: Principal component analysis,” Nature methods, vol. 14, no. 7, pp. 641–643, 2017.\n\n\n[12] J. Maindonald and J. Braun, Data analysis and graphics using r: An example-based approach, vol. 10. Cambridge University Press, 2006.\n\n\n[13] F. L. Gewers et al., “Principal component analysis: A natural approach to data exploration,” ACM Computing Surveys (CSUR), vol. 54, no. 4, pp. 1–34, 2021.\n\n\n[14] F. Pedregosa et al., “Scikit-learn: Machine learning in python,” the Journal of machine Learning research, vol. 12, pp. 2825–2830, 2011.\n\n\n[15] M. Turk and A. Pentland, “Eigenfaces for recognition,” Journal of cognitive neuroscience, vol. 3, no. 1, pp. 71–86, 1991.\n\n\n[16] S. Zhang and M. Turk, “Eigenfaces,” Scholarpedia, vol. 3, no. 9, p. 4244, 2008."
  },
  {
    "objectID": "methods.html#assumptions",
    "href": "methods.html#assumptions",
    "title": "2  Methods",
    "section": "2.1 Assumptions",
    "text": "2.1 Assumptions\nFor PCA to be effective, the data should be continuous (although adaptations of PCA exist for other numeric data structures) and normally distributed, although the the distribution of the data does not truly matter when utilizing PCA as an exploratory methodology. More importantly, the data should be linearly related or the linear combinations of the principal components cannot meaningfully capture the variance of the data. Ideally, the variables should be similar in scale, and free from extreme outliers, or missing values, although this can be addressed in preprocessing, and implementations of PCA such as robust PCA have been developed to address these challenges. [1]"
  },
  {
    "objectID": "methods.html#preprocessing",
    "href": "methods.html#preprocessing",
    "title": "2  Methods",
    "section": "2.2 Preprocessing",
    "text": "2.2 Preprocessing\nPreprocessing data for PCA is straightforward. Missing data should be handled using a method appropriate for the dataset, such as imputation based on the mean or median of the variable observations. After this the variables should be centered and scaled, to a mean of 0 and a standard deviation of 1, although statistical software libraries for SVD and PCA may include this as an option within the function. [2]"
  },
  {
    "objectID": "methods.html#eigenvectors",
    "href": "methods.html#eigenvectors",
    "title": "2  Methods",
    "section": "2.3 Eigenvectors",
    "text": "2.3 Eigenvectors\nPCA uses eigenvectors and their corresponding eigenvalues to calculate the principal components; a brief overview is given here. Eigen is a German word meaning inherent or characteristic, and an eigenvector can be described geometrically as a nonzero vector \\(a\\) of a linear transformation matrix \\(M\\) which does not change direction when the transformation is applied; the only change that occurs is a scaling by factor \\(\\lambda\\), the eigenvalue of the eigenvector \\(a\\). Such a characteristic vector is useful in PCA, where the goal is to maximize variance while reducing dimensionality, and in this context the eigenvectors and eigenvalues can be thought of as the inherent components of the dataset which contain the most important information. Eigenvalues can be calculated from the characteristic polynomial of the matrix, by taking the determinant of \\(M - \\lambda I\\), where \\(I\\) is the identity matrix. Setting this expression equal to zero allows the calculation of the eigenvalues as the roots of the characteristic polynomial; the resulting equation is called the characteristic equation:\n\\[\ndet(M - \\lambda I) = 0\n\\tag{2.1}\\]\nAn eigenvalue \\(\\lambda_k\\) can be used to solve for some eigenvector \\(a_k\\) with the equation \\((M - \\lambda I)a = 0\\). With PCA, we can use the eigenvectors of the covariance matrix to compute the PCs. [3]"
  },
  {
    "objectID": "methods.html#principal-component-analysis",
    "href": "methods.html#principal-component-analysis",
    "title": "2  Methods",
    "section": "2.4 Principal Component Analysis",
    "text": "2.4 Principal Component Analysis\nIn this approach to PCA, SVD is used to extract the most information (variance) from the data matrix while reducing the dimensionality of the data. The first principal component will have the largest possible variance (also called inertia), whose value is defined as a factor score. Factor scores represent a geometric projection of the observations onto the PCs. The second PC, orthogonal to the first, has the second largest variance, and the third PC would continue this pattern. The calculation of PCs via SVD can be understood with the use of matrix operations on a dataset. [4]\n\n2.4.1 Centering and Scaling\nLet our dataset be represented by the \\(N \\times P\\) matrix \\(X\\) comprised of \\(N\\) observations of \\(P\\) variables in the data set, where any element \\(x_{np}\\) represents the \\(n\\)th observation of variable \\(p\\) in the dataset. The matrix \\(X\\) has rank \\(A\\) where \\(A \\leq min\\{N, P\\}\\). The data in \\(X\\) is centered and scaled, such that the mean of each column \\(X_p\\) is 0 and every \\(x_{np}\\) has been standardized with scaled unit variance. We can represent this with the formula:\n\\[\nz_{np} = \\frac{x_{np} - \\bar{x}_{p}}{{\\sigma_{p}}}\n\\tag{2.2}\\]\n\n\n2.4.2 Eigendecomposition of the Covariance Matrix\nThe aim of PCA is to find some linear combination of the columns of \\(X\\) which maximizes the variance. If we define \\(a\\) as a vector of constants \\(a_1, a_2, a_3, …, a_p\\), then \\(Xa\\) represents the linear combination of interest. The variance of \\(Xa\\) is represented by \\(var(Xa) = a^TSa\\), with the covariance matrix \\(S\\), and \\(T\\) representing the transpose operator. Finding the \\(Xa\\) with maximum variance equates to finding the vector \\(a\\) which maximizes the quadratic \\(a^TSa\\), where \\(a^Ta = 1\\). We can write this as \\(a^TSa - \\lambda(a^Ta-1)\\), with the Lagrange multiplier \\(\\lambda\\). [5] Equating this expression to the null vector \\(0\\) allows us to differentiate with respect to \\(a\\):\n\\[\nSa - \\lambda a = 0 \\Rightarrow Sa = \\lambda a\n\\tag{2.3}\\]\nTherefore, \\(a\\) is a unit-norm eigenvector with eigenvalue \\(\\lambda\\) of the covariance matrix \\(S\\). The largest eigenvalue of \\(S\\) is \\(\\lambda_1\\) with the eigenvector \\(a_1\\), which we can define for any eigenvector \\(a\\):\n\\[\nvar(Xa) = a^TSa = \\lambda a^Ta = \\lambda\n\\tag{2.4}\\]\nAny \\(p \\times p\\) real symmetric matrix has exactly \\(p\\) real eigenvalues \\(\\lambda_k\\) for \\(k = 1,...,p\\). The corresponding eigenvectors of these eigenvalues can be defined to form an orthonormal set of vectors such that \\(a_k^Ta_{k^T} = 1\\) if \\(k = k^T\\) and zero otherwise. If we consider that \\(S\\) is such a matrix and impose the restriction of orthogonality to the different coefficient vectors of \\(S\\), the full set of eigenvectors of \\(S\\) represent the solutions to finding linear combinations \\(Xa_k\\) which maximize variance while minimizing correlation with prior linear combinations. \\(Xa_k\\) then represent the linear combinations which are the principal components of the dataset with eigenvectors \\(a_k\\) and eigenvalues \\(\\lambda_k\\). The elements of \\(Xa_k\\) are the factor scores of the PCs, while the elements of the eigenvectors \\(a_k\\) represent the loadings of the PCs. [1]\n\n\n2.4.3 Singular Value Decomposition\nNext we define the singular value decomposition of \\(X\\). Let \\(L\\) be the \\(N \\times A\\) matrix of left singular vectors of the matrix; that is, the columns of \\(L\\) are made up of the eigenvectors of \\(XX^T\\). Let \\(R\\) be the \\(P \\times A\\) matrix of right singular vectors; the columns of \\(R\\) are made up of the eigenvectors of \\(X^TX\\). Finally, let \\(D\\) be the diagonal matrix of singular values, meaning the singular values in \\(D\\) are the square roots of the eigenvalues of \\(XX^T\\) and \\(X^TX\\), and \\(D^2\\) is defined as the diagonal matrix of the non-zero eigenvalues. We can define the singular value decomposition of matrix \\(X\\) as:\n\\[\nX = LD{R}^T\n\\tag{2.5}\\]\nIn this context, the eigenvalues represent the variances of the principal components and summarily contain the important information for the dataset, and we can obtain the PCs of \\(X\\) from the SVD. [6] With the identity matrix \\(I\\), the \\(I \\times R\\) matrix of factor scores can be expressed as:\n\\[\nF = LD\n\\tag{2.6}\\]\nThese factor scores are calculated from the coefficients of the linear combinations in matrix \\(R\\), which can be defined as a projection matrix of the original observations onto the PCs, i.e. the product of \\(X\\) and \\(R\\):\n\\[\nF = LD = LDR^TR = XR\n\\tag{2.7}\\]\nThe matrix \\(R\\) is also referred to as a loading matrix, and \\(X\\) is often described as the product of the factor score matrix and the loading matrix:\n\\[\nX = FR^T\n\\tag{2.8}\\]\nwith the decomposition of \\(F^TF = D^2\\) and \\(R^TR = I\\).\nThe loadings represent the weights of the original variables in the computation of the PCs; in other words, the correlation from -1 to 1 of each variable with the factor score.\nIn a geometric interpretation of PCA, the factor scores measure length on the Cartesian plane. This length represents the projection of the original observations onto the PCs from the origin at \\((0, 0)\\). This is especially useful as a visualization of higher dimension data in two dimensions by utilizing the first two PCs which capture the most variance in the original data. [7]"
  },
  {
    "objectID": "methods.html#interpretation-of-the-principal-components",
    "href": "methods.html#interpretation-of-the-principal-components",
    "title": "2  Methods",
    "section": "2.5 Interpretation of the Principal Components",
    "text": "2.5 Interpretation of the Principal Components\nThere are several ways to interpret the PCs derived from the analysis. Since the eigenvalues represent the variance of the PCs, the proportion of the eigenvalues explain the proportion of variation in the dataset. Using a scree plot, these eigenvalues are plotted to show how much variation each PC explains. Another commonly used tool is a biplot, a combination of the plots of the factor scores (points) and the loadings (vectors) for two PCs (typically PC1 and PC2). The biplot is meant to visually capture the relationship between the original variables and the principal components. Clusters of points represent highly correlated variables, and vector lengths represent the variability captured in that direction on the principal component axis. While many methods and tools exist to interpret the results of PCA, the usefulness of each depends on the needs of the analysis. [3]\n\n\n\n\n[1] I. T. Jolliffe and J. Cadima, “Principal component analysis: A review and recent developments,” Philosophical transactions of the royal society A: Mathematical, Physical and Engineering Sciences, vol. 374, no. 2065, p. 20150202, 2016.\n\n\n[2] R Core Team, “Prcomp, a function of r: A language and environment for statistical computing.” R Foundation for Statistical Computing, Vienna, Austria, 2023. Available: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prcomp. [Accessed: Oct. 16, 2023]\n\n\n[3] S. R. Bennett, “Linear algebra for data science.” 2021. Available: https://shainarace.github.io/LinearAlgebra/index.html. [Accessed: Oct. 16, 2023]\n\n\n[4] J. Hopcroft and R. Kannan, Foundations of data science. 2014.\n\n\n[5] D. G. Luenberger, Optimization by vector space methods. John Wiley & Sons, 1997.\n\n\n[6] H. Abdi and L. J. Williams, “Principal component analysis,” WIREs Computational Statistics, vol. 2, no. 4, pp. 433–459, 2010, doi: https://doi.org/10.1002/wics.101. Available: https://wires.onlinelibrary.wiley.com/doi/abs/10.1002/wics.101\n\n\n[7] J. Lever, M. Krzywinski, and N. Altman, “Points of significance: Principal component analysis,” Nature methods, vol. 14, no. 7, pp. 641–643, 2017."
  },
  {
    "objectID": "examples.html#manual-calculation-of-principal-components",
    "href": "examples.html#manual-calculation-of-principal-components",
    "title": "3  Examples",
    "section": "3.1 Manual calculation of principal components",
    "text": "3.1 Manual calculation of principal components\nIn this illustration, we have access to the two grades of four students in a statistics subject. We aim to employ principal component analysis as a means to reduce the dimensionality from two variables to a singular variable. This transformation will effectively represent students’ performance in the subject with a more compact and interpretable measure. This example is adapted from the resource How to compute principal components [1].\n\n\n\nScores\nBasic Stats\nAdvanced Stats\n\n\n\n\nStudent 1\n4\n11\n\n\nStudent 2\n8\n4\n\n\nStudent 3\n13\n5\n\n\nStudent 4\n7\n14\n\n\nMean\n\\(\\bar{x}\\) = 8\n\\(\\bar{y}\\) = 8.5\n\n\n\n\n3.1.1 Calculate the covariance matrix \\(M\\)\n\\[\n\\begin{bmatrix}\n\\text{cov}(x,x) & \\text{cov}(x,y) \\\\\n\\text{cov}(y,x) & \\text{cov}(y,y) \\\\\n\\end{bmatrix}\n\\]\n\\(\\Rightarrow\\) \\(\\text{cov}(x,x)\\) = \\(\\text{var}(x)\\) = \\(\\mathbf{E}\\)(\\(x^2\\)) - \\(\\mathbf{E}\\) \\((x)^2\\) = \\[ \\frac{(16+0+25+1)}{3}=14 \\]\n\\(\\Rightarrow\\) \\(\\text{cov}(y,y)\\) = \\(\\text{var}(y)\\) = \\(\\mathbf{E}\\)(\\(y^2\\)) - \\(\\mathbf{E}\\) \\((y)^2\\) = \\[ \\frac{(6.25+20.25+12.25+30.25)}{3}=23 \\]\n\\(\\Rightarrow\\) \\(\\text{cov}(x,y)\\) = \\(\\text{cov}(y,x)\\) = \\(\\mathbf{E}\\)(\\(xy\\)) - \\(\\mathbf{E}\\) (\\(x\\))\\(\\mathbf{E}\\) (\\(y\\)) = \\[ \\frac{(-10+0-17.5-5.5)}{3}=-11 \\]\n\\(\\Rightarrow\\) Covariance Matrix \\(M\\) \\[\n\\begin{bmatrix}\n14 & -11 \\\\\n-11 & 23 \\\\\n\\end{bmatrix} \\]\n\n\n3.1.2 Compute the singular value decomposition (SVD)\nWe can obtain the principal components and loadings from SVD of the covariance matrix M since covariance matrix M is a square matrix:\n\\[\n\\begin{bmatrix}\n14 & -11 \\\\\n-11 & 23 \\\\\n\\end{bmatrix} \\times Any\\ vector = \\lambda \\times Any\\ vector\\ ,\\ (vector\\neq 0)\n\\]\n\\[det(M - \\lambda I) = 0\\]\n\n3.1.2.1 Obtain eigenvalues of the covariance matrix \\(\\rightarrow\\) \\(\\lambda_1\\) & \\(\\lambda_2\\)\n\\[\nI = \\begin{bmatrix}\n1 & 0 \\\\\n0 & 1 \\\\\n\\end{bmatrix}\n\\]\n\\[\n\\lambda I = \\lambda \\times \\begin{bmatrix}\n1 & 0 \\\\\n0 & 1 \\\\\n\\end{bmatrix} = \\begin{bmatrix}\n\\lambda  & 0 \\\\\n0 & \\lambda  \\\\\n\\end{bmatrix}\n\\]\n\\[\n\\begin{bmatrix}\n14 & -11 \\\\\n-11&  23 \\\\\n\\end{bmatrix} -\\begin{bmatrix}\n\\lambda  & 0 \\\\\n0 & \\lambda  \\\\\n\\end{bmatrix} = \\begin{bmatrix}\n14-\\lambda  & -11 \\\\\n-11 & 23-\\lambda  \\\\\n\\end{bmatrix}\n\\]\n\\(\\Rightarrow\\)\n\\[\ndet\\begin{bmatrix}\n14-\\lambda & -11 \\\\\n-11& 23-\\lambda  \\\\\n\\end{bmatrix}=0\n\\]\n\\(\\Rightarrow\\) \\[(14-\\lambda)(23-\\lambda) - (-11)(-11) = 0 \\]\n\\[\\lambda^2 +37\\lambda -201 = 0\\]\n\\(\\Rightarrow\\) \\(\\lambda_1\\) = 30.3849, \\(\\lambda_2\\) = 6.6152 (eigenvalues for Covariance Matrix \\(M\\))\n\n\n3.1.2.2 Obtain eigenvector of \\(\\lambda_1\\)\n\\[(M - \\lambda_1I)\\times U_1 = \\mathbf{0} \\]\n\\(\\Rightarrow\\) \\[\\begin{bmatrix}\n14-\\lambda & -11 \\\\\n-11& 23-\\lambda  \\\\\n\\end{bmatrix}\\times\\begin{bmatrix}\nu_1 \\\\\nu_2 \\\\\n\\end{bmatrix}=\\mathbf{0}\n\\]\n\\[(14- \\lambda)u_1 - 11u_2 = 0 \\] \\(\\Rightarrow\\) \\[-16.3849u_1 -11u_2 = 0\\] \\(\\Rightarrow\\) \\[-16.3849u_1= 11u_2 \\] \\(\\Rightarrow\\) \\[u_1 = \\frac{11}{-16.3849}u_2\\]\n\\[\n\\begin{bmatrix}\nu_1 \\\\\nu_2 \\\\\n\\end{bmatrix}= u_2\\begin{bmatrix}\n\\frac{11}{-16.3849}\\\\\n1 \\\\\n\\end{bmatrix}\n\\]\n\\(\\Rightarrow\\) \\[u_2\\begin{bmatrix}\n-11\\\\ 16.3849\n\\end{bmatrix}\\]\n\\[\n\\begin{bmatrix}\n16.3849 & 11 \\\\\n\\end{bmatrix} \\times \\begin{bmatrix}\nu_1 \\\\ u_2\n\\end{bmatrix} = \\begin{bmatrix}\n11 \\\\ -16.3849\n\\end{bmatrix}\n\\]\nNormalized Eigenvector\n\\(\\Rightarrow\\) \\(\\lambda_1\\): \\(e_1\\)\n\\[\n\\frac{1}{\\sqrt{{11^2 +16.3849^2}}}\\begin{bmatrix}\n11 \\\\ -16.3849\n\\end{bmatrix}= \\begin{bmatrix}\n0.5574 \\\\ -0.8303\n\\end{bmatrix}\n\\]\n\\(\\Rightarrow\\) \\(\\lambda_2\\) \\(e_2\\) (Right singular vector) =\n\\[\n\\begin{bmatrix}\n0.8303 \\\\ 0.5574\n\\end{bmatrix}\n\\]\n\n\n\n3.1.3 Derive The new dataset\nFirst Principal Component (PC1)\n\\[\nP_{11} = e_1^T \\times\n\\begin{bmatrix}\n4-mean(x) \\\\ 11 -mean(y)\n\\end{bmatrix}\n= \\begin{bmatrix}\n0.5574 & -0.8303 \\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n4-8 \\\\ 11-8.5\n\\end{bmatrix} =-4.3052\n\\]\n\\[\nP_{12} = e_1^T \\times\n\\begin{bmatrix}\n8-mean(x) \\\\ 4 -mean(y)\n\\end{bmatrix}\n= \\begin{bmatrix}\n0.5574 & -0.8303 \\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n8-8 \\\\ 4-8.5\n\\end{bmatrix} =3.7361\n\\]\n\\[\nP_{13} = e_1^T \\times\n\\begin{bmatrix}\n13-mean(x) \\\\ 5 -mean(y)\n\\end{bmatrix}\n= \\begin{bmatrix}\n0.5574 & -0.8303 \\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n13-8 \\\\ 5-8.5\n\\end{bmatrix}= 5.6928\n\\]\n\\[\nP_{14}= e_1^T \\times\n\\begin{bmatrix}\n7-mean(x) \\\\ 14 -mean(y)\n\\end{bmatrix}\n= \\begin{bmatrix}\n0.5574 & -0.8303 \\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n7-8 \\\\ 14-8.5\n\\end{bmatrix} = -5.1238\n\\]\n\nThe new dataset (Left singular vector)\n\n\n\n\n\n\n\n\n\n\n\nStudent 1\nStudent 2\nStudent 3\nStudent 4\n\n\n\n\nPC1\n-4.3052\n3.7361\n5.6928\n-5.1238\n\n\n\n\n\n3.1.4 Verifying and visualizing the results\n\n\n\nDataframe structure\n\n\nStudent\nBasicStats\nAdvancedStats\n\n\n\n\n1\n4\n11\n\n\n2\n8\n4\n\n\n3\n13\n5\n\n\n4\n7\n14\n\n\n\n\n\n\n\n\nImportance of components\n\n\n\nPC1\nPC2\n\n\n\n\nStandard deviation\n1.270042\n0.6220884\n\n\nProportion of Variance\n0.806500\n0.1935000\n\n\nCumulative Proportion\n0.806500\n1.0000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.1.5 Results\nThe first principal component of the data captures 80.7% of the variation (or information) while reducing the dimensionality of the dataset from 2 variables to 1. Small datasets such as this make the hand-calculation of principal components feasible and easy to follow, but the strengths of PCA are especially evident when software is used to enable principal component analysis for large datasets. In the next example, we demonstrate how PCA can be used with a large dataset using the R programming language."
  },
  {
    "objectID": "examples.html#pca-on-a-large-dataset-using-r",
    "href": "examples.html#pca-on-a-large-dataset-using-r",
    "title": "3  Examples",
    "section": "3.2 PCA on a large dataset using R",
    "text": "3.2 PCA on a large dataset using R\nFor this application of PCA, the Abalone dataset from the UCI Machine Learning Repository is used [2]. This dataset contain 4177 observations of 9 variables which record characteristics of each abalone including sex, length, diameter, height, weights, and the number of rings. The variables, apart from sex, are continuous and correlated making the dataset an ideal candidate for demonstrating dimensionality reduction via PCA.\n\n3.2.1 Libraries\nFirst, the appropriate and necessary libraries are loaded in R. These provide the functions which serve as the backbone of the analysis, handling the computational aspects of PCA as well as visualizing the results.\n\n\nCode\n# Load necessary libraries\nlibrary(tidyverse)  # for handling missing values\nlibrary(corrplot) # for plotting the correlation matrix\nlibrary(factoextra) # PCA plots\nlibrary(summarytools) #produces summary stats\n\n\n\n\n3.2.2 Data Preparation\nThe dataset contains 9 variables with 1 categorical variable and 8 numeric variables. The dataset contains no missing values. For this example in applying principal component analysis, we exclude the categorical variable ‘Sex’ and focus the PCA on the numerical dimensions of the Abalone. For analyses involving a mix of numeric and non-numeric variables other factor analysis techniques can be used, such as factor analysis of mixed data [3].\n\n\nCode\n# Load dataset\nabalone &lt;- read.csv('./abalone/abalone.csv')\n\ndata_desc = descr(abalone, plain.ascii = FALSE, headings = FALSE) # descriptive statistics for the dataset\n\ndata_desc %&gt;%\n  kbl(align= 'l') %&gt;%\n  kable_paper(\"hover\")\n\n\n\n\n\n\nDiameter\nHeight\nLength\nRings\nShell_weight\nShucked_weight\nViscera_weight\nWhole_weight\n\n\n\n\nMean\n0.4078813\n0.1395164\n0.5239921\n9.9336845\n0.2388309\n0.3593675\n0.1805936\n0.8287422\n\n\nStd.Dev\n0.0992399\n0.0418271\n0.1200929\n3.2241690\n0.1392027\n0.2219629\n0.1096143\n0.4903890\n\n\nMin\n0.0550000\n0.0000000\n0.0750000\n1.0000000\n0.0015000\n0.0010000\n0.0005000\n0.0020000\n\n\nQ1\n0.3500000\n0.1150000\n0.4500000\n8.0000000\n0.1300000\n0.1860000\n0.0935000\n0.4415000\n\n\nMedian\n0.4250000\n0.1400000\n0.5450000\n9.0000000\n0.2340000\n0.3360000\n0.1710000\n0.7995000\n\n\nQ3\n0.4800000\n0.1650000\n0.6150000\n11.0000000\n0.3290000\n0.5020000\n0.2530000\n1.1530000\n\n\nMax\n0.6500000\n1.1300000\n0.8150000\n29.0000000\n1.0050000\n1.4880000\n0.7600000\n2.8255000\n\n\nMAD\n0.0963690\n0.0370650\n0.1186080\n2.9652000\n0.1475187\n0.2349921\n0.1178667\n0.5285469\n\n\nIQR\n0.1300000\n0.0500000\n0.1650000\n3.0000000\n0.1990000\n0.3160000\n0.1595000\n0.7115000\n\n\nCV\n0.2433058\n0.2998003\n0.2291884\n0.3245693\n0.5828504\n0.6176489\n0.6069664\n0.5917269\n\n\nSkewness\n-0.6087607\n3.1265706\n-0.6394138\n1.1133019\n0.6204809\n0.7185815\n0.5914271\n0.5305773\n\n\nSE.Skewness\n0.0378868\n0.0378868\n0.0378868\n0.0378868\n0.0378868\n0.0378868\n0.0378868\n0.0378868\n\n\nKurtosis\n-0.0482711\n75.8953091\n0.0616411\n2.3239123\n0.5281636\n0.5912553\n0.0809994\n-0.0264756\n\n\nN.Valid\n4177.0000000\n4177.0000000\n4177.0000000\n4177.0000000\n4177.0000000\n4177.0000000\n4177.0000000\n4177.0000000\n\n\nPct.Valid\n100.0000000\n100.0000000\n100.0000000\n100.0000000\n100.0000000\n100.0000000\n100.0000000\n100.0000000\n\n\n\n\n\n\n\nThe summary statistics show the differences in measurement between variables, with some variables such as diameter and viscera weight having small ranges and others, namely rings, having relatively large ranges. For this reason, scaling of the variables is a crucial step in PCA to ensure results accurately capture the variance in the data.\n\n\n3.2.3 Feature Scaling\nStandardization ensures all variables, also called features, are on the same scale, and the scale function allows us to center the data to a mean of 0 and variance of 1. This ensures no single feature has an outsized effect during the principal component analysis.\n\n\nCode\n# Select only the numeric variables \nabalone = select_if(abalone, is.numeric)\n\n# Standardization of numerical features\nabalone_sc &lt;- scale(abalone, center = TRUE, scale = TRUE)\n\nsc_sum = summary(abalone_sc)\n\nkbl(sc_sum, align= 'l') %&gt;%\n  kable_paper(\"hover\")\n\n\n\n\n\n\nLength\nDiameter\nHeight\nWhole_weight\nShucked_weight\nViscera_weight\nShell_weight\nRings\n\n\n\n\n\nMin. :-3.7387\nMin. :-3.5558\nMin. :-3.33555\nMin. :-1.68589\nMin. :-1.6145\nMin. :-1.64298\nMin. :-1.7049\nMin. :-2.7708\n\n\n\n1st Qu.:-0.6161\n1st Qu.:-0.5832\n1st Qu.:-0.58614\n1st Qu.:-0.78966\n1st Qu.:-0.7811\n1st Qu.:-0.79455\n1st Qu.:-0.7818\n1st Qu.:-0.5997\n\n\n\nMedian : 0.1749\nMedian : 0.1725\nMedian : 0.01156\nMedian :-0.05963\nMedian :-0.1053\nMedian :-0.08752\nMedian :-0.0347\nMedian :-0.2896\n\n\n\nMean : 0.0000\nMean : 0.0000\nMean : 0.00000\nMean : 0.00000\nMean : 0.0000\nMean : 0.00000\nMean : 0.0000\nMean : 0.0000\n\n\n\n3rd Qu.: 0.7578\n3rd Qu.: 0.7267\n3rd Qu.: 0.60926\n3rd Qu.: 0.66123\n3rd Qu.: 0.6426\n3rd Qu.: 0.66056\n3rd Qu.: 0.6478\n3rd Qu.: 0.3307\n\n\n\nMax. : 2.4232\nMax. : 2.4397\nMax. :23.68045\nMax. : 4.07178\nMax. : 5.0848\nMax. : 5.28587\nMax. : 5.5040\nMax. : 5.9136\n\n\n\n\n\n\n\nViewing the data after scaling and centering, values greater than 3 or less than -3 represent outliers more than 3 standard deviations from the mean. Based on the ranges of the variables, we should view a boxplot of the data to further investigate.\n\n\nCode\n# Plot a boxplot to visualize potential outliers\npar(mar=c(4, 8, 4, 4))\nboxplot(abalone_sc, col = \"steelblue\", main = \"Visualization of scaled and centered data\", horizontal = TRUE, las = 1)\n\n\n\n\n\nAre there enough outliers to be a cause for concern? We can see how many lie outside of the third standard deviation of the data for each variable.\n\n\nCode\nouts = colSums(abalone_sc &gt; 3 | abalone_sc &lt; -3)\n\nkbl(outs, col.names = ('Outliers'), align = 'l') %&gt;%\n  kable_paper(\"hover\")\n\n\n\n\n\n\nOutliers\n\n\n\n\nLength\n15\n\n\nDiameter\n13\n\n\nHeight\n5\n\n\nWhole_weight\n19\n\n\nShucked_weight\n37\n\n\nViscera_weight\n22\n\n\nShell_weight\n27\n\n\nRings\n62\n\n\n\n\n\n\n\nOf the 4177 observations, at most 62 in a single variable (Rings) are outliers. The tolerance for outliers will differ depending on the investigation, but for our illustrative purposes this number is well within tolerance for principal component analysis.\nLastly, we can investigate the correlation among the variables. PCA is best used with linearly correlated data. If the data is not correlated, the results of PCA will be less meaningful.\n\n\nCode\n# Calculate correlations and round to 2 digits\nabalone_corr &lt;- cor(abalone_sc)\ncorrplot(abalone_corr, method=\"number\")\n\n\n\n\n\nOur scaled and centered data has strong linear correlations and contains a relatively small number of outliers. We can now calculate the principal components of the dataset.\n\n\n3.2.4 PCA via Singular Value Decomposition\nThe prcomp() function [4] performs principal component analysis on a dataset using the singular value decomposition method, which utilizes the covariance matrix of the data.\n\n\nCode\n# Apply PCA using prcomp()\nabalone_pca &lt;- prcomp(abalone_sc)\n\nsum_pca = as.data.frame(summary(abalone_pca)$importance)\n\nkbl(sum_pca, align= 'l', caption = \"Importance of components\") %&gt;%\n  kable_paper(\"hover\")\n\n\n\nImportance of components\n\n\n\nPC1\nPC2\nPC3\nPC4\nPC5\nPC6\nPC7\nPC8\n\n\n\n\nStandard deviation\n2.590838\n0.8340342\n0.508373\n0.4074185\n0.2914613\n0.251938\n0.1126684\n0.0799895\n\n\nProportion of Variance\n0.839050\n0.0869500\n0.032310\n0.0207500\n0.0106200\n0.007930\n0.0015900\n0.0008000\n\n\nCumulative Proportion\n0.839050\n0.9260100\n0.958310\n0.9790600\n0.9896800\n0.997610\n0.9992000\n1.0000000\n\n\n\n\n\n\n\n\n\nCode\n# Principal Component scores vector\npc_scores &lt;- abalone_pca$x\n\n# Std Deviation of Components\ncomponent_sdev &lt;- abalone_pca$sdev\n\n# Eigenvector or Loadings\neigenvector &lt;- abalone_pca$rotation\n\n# Mean of variables\ncomponent_mean &lt;- abalone_pca$center \n\n# Scaling factor of Variables\ncomponent_scale &lt;- abalone_pca$scale\n\n# Proportion of variance explained by each PC\nvariance_explained &lt;- component_sdev^2 / sum(component_sdev^2)\n\n# Cumulative proportion of variance explained\ncumulative_variance_explained &lt;- cumsum(variance_explained)\n\n# Retain components that explain a percentage of the variance\nnum_components &lt;- which(cumulative_variance_explained &gt;= 0.92)[1]\n\n# Select the desired number of principal components\nselected_pcs &lt;- pc_scores[, 1:num_components]\n\n\nThe first 2 principal components alone explain 92% of the variance in the data.\n\n3.2.4.1 Loading of First Two Components\nThe loading are the weights assigned to each variable for that particular principal component.\n\n\nCode\n# Access the loadings for the first two principal components\nloadings_first_two_components &lt;- eigenvector[, 1:2]\n\n# Print the loadings for the first two principal components\n\nkbl(loadings_first_two_components, align= 'l', caption = \"Loadings for the first two principal components\") %&gt;%\n  kable_paper(\"hover\")\n\n\n\nLoadings for the first two principal components\n\n\n\nPC1\nPC2\n\n\n\n\nLength\n0.3721385\n0.0682827\n\n\nDiameter\n0.3730941\n0.0400480\n\n\nHeight\n0.3400268\n-0.0704631\n\n\nWhole_weight\n0.3783075\n0.1373462\n\n\nShucked_weight\n0.3624545\n0.2988399\n\n\nViscera_weight\n0.3685578\n0.1729785\n\n\nShell_weight\n0.3707578\n-0.0454004\n\n\nRings\n0.2427128\n-0.9212039\n\n\n\n\n\n\n\n\n\n3.2.4.2 PCA - Elements\nThe values in abalone_pca$x are the coordinates of each observation in the new principal component space. These coordinates are the scores for each observation along each principal component. The eigenvectors of the covariance or correlation matrix of the data represent the directions of maximum variance in the dataset.\n\n\n\n3.2.5 Visualization\n\n3.2.5.1 Scree Plot - Cumulative Variance Explained\n\n\nCode\nfviz_eig(abalone_pca, addlabels = TRUE)\n\n\n\n\n\nThe scree plot visualizes the variance captured by each PC. PC1 explains 83.9% of the variance, and PC2 explains 8.7% variance.\n\n\n3.2.5.2 Biplot\nThe correlation between a variable and a principal component is used as the coordinates of the variable on the PC, shown as dimensions on the biplot. Dim1 corresponds to PC1, and Dim2 to PC2. The representation of variables differs from the plot of the observations: The observations are represented by their projections, but the variables are represented by their correlations [5].\n\n\nCode\nfviz_pca_biplot(abalone_pca, label = \"var\", alpha.ind = \"contrib\", col.var = \"blue\", repel = TRUE)\n\n\n\n\n\n\n\n3.2.5.3 Variable Contribution\nTop variable contribution for the first two principal components.\n\n\nCode\n# Contributions of variables to PC1\npc2_contribution &lt;- fviz_contrib(abalone_pca, choice = \"var\", axes = 1, top = 20)\n\n# Modify the theme to rotate X-axis labels to 90 degrees\npc2_contribution +\n  theme(\n    axis.text.x = element_text(angle = 0),\n    plot.title = element_text(hjust = 0)  # horizontal justification\n  ) +\n  coord_flip() +\n  labs(title = \"Contribution of Variables to PC1\",\n       y = \"Percentage Contribution\",\n       x = \"\",\n       caption = \"PC1 explains 83.9% of the variance\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1,\n                                                     accuracy = 1))\n\n\n\n\n\nCode\n# Contributions of variables to PC2\npc2_contribution &lt;- fviz_contrib(abalone_pca, choice = \"var\", axes = 2, top = 12)\n\n# Modify the theme to rotate X-axis labels to 90 degrees\npc2_contribution +\n  theme(\n    axis.text.x = element_text(angle = 0),\n    plot.title = element_text(hjust = 0)  # horizontal justification\n  ) +\n  coord_flip() +\n  labs(title = \"Contribution of Variables to PC2\",\n       y = \"Percentage Contribution\",\n       x = \"\",\n       caption = \"PC2 explains 8.7% of the variance\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1,\n                                                     accuracy = 1))\n\n\n\n\n\n\n\n\n3.2.6 Results\nThe first principal component captures 83.9% of the variance in the data. This linear combination has relatively equal loadings for whole weight, diameter, length, shell weight, viscera weight, and shucked weight, with height and rings having lower loadings. The second principal component is mostly influenced by the variable rings which makes up over 80% of the contribution to PC2. The biplot is an effective visualization of how each variable contributes to PC1, or dimension 1 on the graph, and PC2, or dimension 2 on the graph. The length and direction of each vector represent the contribution of each variable to the principal components; whole weight and rings are the longest, representing the largest contributions to PC1 and PC2 respectively.\nPCA is primarily an exploratory tool, which allows us to visualize high-dimensional data in lower dimensions as shown above in the biplot and accompanying scree plot. These PCs can be used to explore data in other ways, such as looking for trends and patterns in the data or identifying clusters and outliers. In the formal analysis in the following chapter, the applications of PCA are further explored through the development of a regression model on the principal components of a dataset.\n\n\n\n\n[1] E. K. CS, “PCA problem / how to compute principal components / KTU machine learning.” YouTube, 2020. Available: https://youtu.be/MLaJbA82nzk. [Accessed: Nov. 01, 2023]\n\n\n[2] S. Nash Warwick and W. Ford, “Abalone.” UCI Machine Learning Repository, 1995.\n\n\n[3] J. Pagès, Multiple factor analysis by example using r. CRC Press, 2014.\n\n\n[4] R Core Team, “Prcomp, a function of r: A language and environment for statistical computing.” R Foundation for Statistical Computing, Vienna, Austria, 2023. Available: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prcomp. [Accessed: Oct. 16, 2023]\n\n\n[5] H. Abdi and L. J. Williams, “Principal component analysis,” WIREs Computational Statistics, vol. 2, no. 4, pp. 433–459, 2010, doi: https://doi.org/10.1002/wics.101. Available: https://wires.onlinelibrary.wiley.com/doi/abs/10.1002/wics.101"
  },
  {
    "objectID": "dataset.html",
    "href": "dataset.html",
    "title": "4  Dataset",
    "section": "",
    "text": "5 Yeah~ I know how to push it~ Gail\nThe principal data used in this analysis was obtained from the “Consumer Assessment of Healthcare Providers and Systems (CAHPS) In-Center Hemodialysis Survey”, which is administered to in-center hemodialysis (ICH) facilities by approved survey vendors under the Centers for Medicare & Medicaid Services (CMS). The dataset comprises 39 variables consisting of state-level averages of common dialysis quality measures. The version in this analysis was released on July 19, 2023 through the data.cms.gov website. [1]\nThe structure of the dataset can be categorized into three main components:\nThe selection of this dataset for our analysis is driven by its inherent characteristic of multicollinearity among variables, indicating that certain variables are less significant in explaining the variability of the response variables. Additionally, all variables in the dataset are numeric, except for the index variable that is excluded from the subsequent Principal Component Analysis (PCA). Our objective is to utilize this dataset to illustrate the efficacy of PCA in dimension reduction and the efficient visualization of data."
  },
  {
    "objectID": "dataset.html#renaming-variables",
    "href": "dataset.html#renaming-variables",
    "title": "4  Dataset",
    "section": "5.1 Renaming Variables",
    "text": "5.1 Renaming Variables\nIn our data preparation process, we have efficiently removed white spaces, and edited variable names, enhancing the readability and interpretability of the dataset. This meticulous effort adds to the overall clarity, making it quicker, and more meaningful for further examination. For instance, “hypercalcemia_calcium &gt; 10.2Mg”, was used in replacement of Percentage.Of.Adult..Patients.With.Hypercalcemia..Serum.Calcium.Greater.Than.10.2.Mg.dL."
  },
  {
    "objectID": "dataset.html#statistical-summary",
    "href": "dataset.html#statistical-summary",
    "title": "4  Dataset",
    "section": "5.2 Statistical Summary",
    "text": "5.2 Statistical Summary\nThe dataset contains 56 observations of 39 variables with 1 discrete variable (States/Territories) and 38 continuous variables. 13 observations have at least 1 missing record, with 34 missing observations in total. Most missing data in the dataset occurs in variables relating to pediatric patient data.\n\n\n\n\n\n\nbetter_fistula\nbetter_hospital_readmission\nbetter_hospitalization\nbetter_infection\nbetter_survival\nbetter_transfusion\nexpected_fistula\nexpected_hospital_readmission\nexpected_hospitalization\nexpected_infection\nexpected_survival\nexpected_transfusion\nHgb_10g\nHgb_12g\nhypercalcemia_calcium &gt; 10.2Mg\nincident_transplant_waitlist_better\nincident_transplant_waitlist_expected\nincident_transplant_waitlist_worse\nKt_v_1.2\nKt_v_1.7\nlong_term_catheter\npediatric_Kt_v_1.8\npediatric_nPCR\npedriatic_Kt_v_1.2\nphosphorus (3.5 - 4.5) Mg\nphosphorus (4.6 - 5.5) Mg\nphosphorus (5.6 - 7) Mg\nphosphorus &lt; 3.5Mg\nphosphorus &gt; 7Mg\nprevalent_transplant_waitlist_better\nprevalent_transplant_waitlist_expected\nprevalent_transplant_waitlist_worse\nworse_fistula\nworse_hospital_readmission\nworse_hospitalization\nworse_infection\nworse_survival\nworse_transfusion\n\n\n\n\nMean\n4.928571\n2.446429\n1.250000\n40.000000\n3.482143\n0.1785714\n116.571429\n119.589286\n122.964286\n74.000000\n118.928571\n99.232143\n21.4727273\n0.2363636\n2.4000000\n4.714286\n61.017857\n2.857143\n96.4000000\n91.7222222\n17.0181818\n74.5434783\n91.0196078\n91.2040816\n23.1272727\n29.0909091\n23.7090909\n7.6000000\n16.4545455\n7.839286\n120.910714\n2.892857\n5.250000\n3.500000\n4.928571\n1.142857\n4.125000\n7.285714\n\n\nStd.Dev\n9.444300\n3.201816\n2.225881\n54.678232\n5.134522\n0.4712514\n137.766714\n143.414945\n144.863442\n80.787038\n141.581824\n120.253367\n7.8689605\n0.4287638\n4.3316236\n9.692948\n84.743354\n5.528204\n1.8718183\n4.3628650\n3.9181010\n23.3063716\n14.8478823\n10.3822356\n2.4118116\n1.6696942\n1.5948148\n1.0988209\n3.0600059\n24.430069\n144.045735\n3.530020\n8.237939\n6.266796\n10.759955\n1.710168\n6.084444\n9.415102\n\n\nMin\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.0000000\n0.000000\n2.000000\n1.000000\n0.000000\n2.000000\n1.000000\n9.0000000\n0.0000000\n1.0000000\n0.000000\n0.000000\n0.000000\n87.0000000\n69.0000000\n10.0000000\n0.0000000\n15.0000000\n47.0000000\n11.0000000\n24.0000000\n20.0000000\n5.0000000\n8.0000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nQ1\n0.000000\n0.000000\n0.000000\n5.500000\n0.000000\n0.0000000\n24.500000\n22.500000\n26.000000\n13.000000\n23.000000\n21.500000\n18.0000000\n0.0000000\n1.0000000\n0.000000\n8.500000\n0.000000\n96.0000000\n90.0000000\n15.0000000\n64.0000000\n89.0000000\n86.0000000\n22.0000000\n28.0000000\n23.0000000\n7.0000000\n15.0000000\n0.000000\n26.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n1.000000\n\n\nMedian\n2.000000\n1.500000\n1.000000\n22.000000\n1.000000\n0.0000000\n66.000000\n68.500000\n71.500000\n47.500000\n67.500000\n53.000000\n20.0000000\n0.0000000\n2.0000000\n1.000000\n32.000000\n1.000000\n97.0000000\n93.0000000\n17.0000000\n80.5000000\n96.0000000\n93.0000000\n23.0000000\n29.0000000\n24.0000000\n8.0000000\n16.0000000\n1.000000\n63.000000\n2.000000\n1.000000\n1.000000\n1.000000\n0.000000\n1.000000\n3.000000\n\n\nQ3\n5.500000\n3.500000\n2.000000\n52.000000\n4.500000\n0.0000000\n158.500000\n157.500000\n169.500000\n107.000000\n161.000000\n135.500000\n23.0000000\n0.0000000\n2.0000000\n4.500000\n80.000000\n3.000000\n97.0000000\n94.0000000\n18.0000000\n93.0000000\n100.0000000\n100.0000000\n24.0000000\n30.0000000\n24.0000000\n8.0000000\n18.0000000\n4.000000\n168.000000\n4.500000\n7.000000\n3.000000\n4.500000\n2.000000\n5.000000\n10.500000\n\n\nMax\n50.000000\n17.000000\n15.000000\n290.000000\n24.000000\n2.0000000\n659.000000\n665.000000\n675.000000\n397.000000\n657.000000\n596.000000\n60.0000000\n1.0000000\n33.0000000\n52.000000\n420.000000\n34.000000\n99.0000000\n96.0000000\n29.0000000\n100.0000000\n100.0000000\n100.0000000\n27.0000000\n32.0000000\n29.0000000\n11.0000000\n26.0000000\n168.000000\n714.000000\n18.000000\n40.000000\n38.000000\n67.000000\n8.000000\n24.000000\n47.000000\n\n\nMAD\n2.965200\n2.223900\n1.482600\n26.686800\n1.482600\n0.0000000\n76.353900\n80.801700\n83.025600\n54.856200\n77.095200\n62.269200\n4.4478000\n0.0000000\n1.4826000\n1.482600\n42.995400\n1.482600\n1.4826000\n2.9652000\n2.9652000\n20.0151000\n5.9304000\n10.3782000\n1.4826000\n1.4826000\n1.4826000\n1.4826000\n2.9652000\n1.482600\n77.836500\n2.965200\n1.482600\n1.482600\n1.482600\n0.000000\n1.482600\n4.447800\n\n\nIQR\n5.250000\n3.250000\n2.000000\n45.250000\n4.250000\n0.0000000\n132.500000\n133.000000\n142.250000\n92.500000\n136.500000\n111.500000\n5.0000000\n0.0000000\n1.0000000\n4.250000\n70.250000\n3.000000\n1.0000000\n4.0000000\n3.0000000\n28.5000000\n10.5000000\n14.0000000\n2.0000000\n2.0000000\n1.0000000\n1.0000000\n3.0000000\n4.000000\n139.000000\n4.250000\n6.500000\n3.000000\n4.250000\n2.000000\n5.000000\n9.250000\n\n\nCV\n1.916235\n1.308771\n1.780705\n1.366956\n1.474529\n2.6390081\n1.181822\n1.199229\n1.178094\n1.091717\n1.190478\n1.211839\n0.3664630\n1.8140006\n1.8048432\n2.056080\n1.388829\n1.934871\n0.0194172\n0.0475661\n0.2302303\n0.3126547\n0.1631284\n0.1138352\n0.1042843\n0.0573957\n0.0672660\n0.1445817\n0.1859672\n3.116364\n1.191340\n1.220254\n1.569131\n1.790513\n2.183179\n1.496397\n1.475017\n1.292269\n\n\nSkewness\n3.363870\n2.328926\n4.353682\n2.635591\n2.262096\n2.5829463\n2.096187\n2.093319\n2.107653\n1.777830\n2.136469\n2.309874\n2.7370740\n1.2073920\n6.4192747\n3.542913\n2.726188\n3.655246\n-2.8903292\n-2.8380628\n1.0385708\n-1.2724094\n-3.1559206\n-1.8528969\n-2.2926951\n-0.6565867\n0.8481480\n0.3256139\n0.1880386\n5.267453\n2.055601\n1.901652\n2.014739\n3.383665\n3.960928\n1.795458\n1.956831\n2.220536\n\n\nSE.Skewness\n0.319000\n0.319000\n0.319000\n0.319000\n0.319000\n0.3190000\n0.319000\n0.319000\n0.319000\n0.319000\n0.319000\n0.319000\n0.3217421\n0.3217421\n0.3217421\n0.319000\n0.319000\n0.319000\n0.3217421\n0.3245563\n0.3217421\n0.3500963\n0.3334641\n0.3398276\n0.3217421\n0.3217421\n0.3217421\n0.3217421\n0.3217421\n0.319000\n0.319000\n0.319000\n0.319000\n0.319000\n0.319000\n0.319000\n0.319000\n0.319000\n\n\nKurtosis\n11.890419\n6.698317\n23.383843\n7.991801\n5.329195\n5.9771465\n4.759628\n4.725274\n4.912233\n3.576431\n4.953014\n6.086035\n10.0996967\n-0.5512415\n42.3098624\n12.933033\n8.090744\n16.044548\n11.3474387\n11.4686782\n1.5698513\n1.4283998\n11.9801099\n4.7877933\n9.5790499\n0.5666625\n1.2609791\n0.5920821\n1.7100296\n30.444720\n4.657044\n4.550810\n4.184155\n14.260341\n18.224998\n3.260659\n3.107099\n5.961102\n\n\nN.Valid\n56.000000\n56.000000\n56.000000\n56.000000\n56.000000\n56.0000000\n56.000000\n56.000000\n56.000000\n56.000000\n56.000000\n56.000000\n55.0000000\n55.0000000\n55.0000000\n56.000000\n56.000000\n56.000000\n55.0000000\n54.0000000\n55.0000000\n46.0000000\n51.0000000\n49.0000000\n55.0000000\n55.0000000\n55.0000000\n55.0000000\n55.0000000\n56.000000\n56.000000\n56.000000\n56.000000\n56.000000\n56.000000\n56.000000\n56.000000\n56.000000\n\n\nPct.Valid\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.0000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n98.2142857\n98.2142857\n98.2142857\n100.000000\n100.000000\n100.000000\n98.2142857\n96.4285714\n98.2142857\n82.1428571\n91.0714286\n87.5000000\n98.2142857\n98.2142857\n98.2142857\n98.2142857\n98.2142857\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n\n\n\n\n\n\n\n\nThe histograms of the data reveal that majority of the variables are skewed right, with the QQ plots supporting that very few of the variables are normally distributed. Finally, many of the variables are highly correlated as expected based on the design of the dataset."
  },
  {
    "objectID": "dataset.html#missing-values-detection",
    "href": "dataset.html#missing-values-detection",
    "title": "4  Dataset",
    "section": "5.3 Missing Values Detection",
    "text": "5.3 Missing Values Detection\n\nThe 34 missing observations represent 1.6% of the dataset.\n14 variables have missing observations.\nA table was generated to count missing values for all variables.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMissing_Values\n\n\n\n\nState\n0\n\n\nbetter_transfusion\n0\n\n\nexpected_transfusion\n0\n\n\nworse_transfusion\n0\n\n\nbetter_infection\n0\n\n\nexpected_infection\n0\n\n\nworse_infection\n0\n\n\nKt_v_1.2\n1\n\n\nKt_v_1.7\n2\n\n\npedriatic_Kt_v_1.2\n7\n\n\npediatric_Kt_v_1.8\n10\n\n\npediatric_nPCR\n5\n\n\nbetter_fistula\n0\n\n\nexpected_fistula\n0\n\n\nworse_fistula\n0\n\n\nlong_term_catheter\n1\n\n\nhypercalcemia_calcium &gt; 10.2Mg\n1\n\n\nphosphorus &lt; 3.5Mg\n1\n\n\nphosphorus (3.5 - 4.5) Mg\n1\n\n\nphosphorus (4.6 - 5.5) Mg\n1\n\n\nphosphorus (5.6 - 7) Mg\n1\n\n\nphosphorus &gt; 7Mg\n1\n\n\nbetter_hospitalization\n0\n\n\nexpected_hospitalization\n0\n\n\nworse_hospitalization\n0\n\n\nbetter_hospital_readmission\n0\n\n\nexpected_hospital_readmission\n0\n\n\nworse_hospital_readmission\n0\n\n\nbetter_survival\n0\n\n\nexpected_survival\n0\n\n\nworse_survival\n0\n\n\nincident_transplant_waitlist_better\n0\n\n\nincident_transplant_waitlist_expected\n0\n\n\nincident_transplant_waitlist_worse\n0\n\n\nprevalent_transplant_waitlist_better\n0\n\n\nprevalent_transplant_waitlist_expected\n0\n\n\nprevalent_transplant_waitlist_worse\n0\n\n\nHgb_10g\n1\n\n\nHgb_12g\n1"
  },
  {
    "objectID": "dataset.html#data-distribution",
    "href": "dataset.html#data-distribution",
    "title": "4  Dataset",
    "section": "5.4 Data Distribution",
    "text": "5.4 Data Distribution\n\nHistograms were used to display a sample (8 variables) of the distribution in respect to the predictor variable.\nNormality is not assumed. The majority of the observations in each variable do not meet the normality assumption."
  },
  {
    "objectID": "dataset.html#normal-qq-plot-of-residuals",
    "href": "dataset.html#normal-qq-plot-of-residuals",
    "title": "4  Dataset",
    "section": "5.5 Normal QQ Plot of Residuals",
    "text": "5.5 Normal QQ Plot of Residuals\n\nIt is apparent that the variables have heavy left and right tails.\nThe presence of outliers is consistent though the entire dataset."
  },
  {
    "objectID": "dataset.html#imputation-of-missing-values",
    "href": "dataset.html#imputation-of-missing-values",
    "title": "4  Dataset",
    "section": "5.6 Imputation of Missing Values",
    "text": "5.6 Imputation of Missing Values\n\nAfter substituting missing values with the mean, we are now able to proceed with standardizing the dataset.\nThe standardization process will be implemented in the Analysis chapter.\nA table was created to confirm the absence of any missing observations in the data frame.\nDue to its categorical data type, the “State” variable was omitted from the analysis.\n\n\n\n\n\n\n\nMissing_Values\nType\n\n\n\n\nbetter_transfusion\n0\ndouble\n\n\nexpected_transfusion\n0\ndouble\n\n\nworse_transfusion\n0\ndouble\n\n\nbetter_infection\n0\ndouble\n\n\nexpected_infection\n0\ndouble\n\n\nworse_infection\n0\ndouble\n\n\nKt_v_1.2\n0\ndouble\n\n\nKt_v_1.7\n0\ndouble\n\n\npedriatic_Kt_v_1.2\n0\ndouble\n\n\npediatric_Kt_v_1.8\n0\ndouble\n\n\npediatric_nPCR\n0\ndouble\n\n\nbetter_fistula\n0\ndouble\n\n\nexpected_fistula\n0\ndouble\n\n\nworse_fistula\n0\ndouble\n\n\nlong_term_catheter\n0\ndouble\n\n\nhypercalcemia_calcium &gt; 10.2Mg\n0\ndouble\n\n\nphosphorus &lt; 3.5Mg\n0\ndouble\n\n\nphosphorus (3.5 - 4.5) Mg\n0\ndouble\n\n\nphosphorus (4.6 - 5.5) Mg\n0\ndouble\n\n\nphosphorus (5.6 - 7) Mg\n0\ndouble\n\n\nphosphorus &gt; 7Mg\n0\ndouble\n\n\nbetter_hospitalization\n0\ndouble\n\n\nexpected_hospitalization\n0\ndouble\n\n\nworse_hospitalization\n0\ndouble\n\n\nbetter_hospital_readmission\n0\ndouble\n\n\nexpected_hospital_readmission\n0\ndouble\n\n\nworse_hospital_readmission\n0\ndouble\n\n\nbetter_survival\n0\ndouble\n\n\nexpected_survival\n0\ndouble\n\n\nworse_survival\n0\ndouble\n\n\nincident_transplant_waitlist_better\n0\ndouble\n\n\nincident_transplant_waitlist_expected\n0\ndouble\n\n\nincident_transplant_waitlist_worse\n0\ndouble\n\n\nprevalent_transplant_waitlist_better\n0\ndouble\n\n\nprevalent_transplant_waitlist_expected\n0\ndouble\n\n\nprevalent_transplant_waitlist_worse\n0\ndouble\n\n\nHgb_10g\n0\ndouble\n\n\nHgb_12g\n0\ndouble\n\n\n\n\n\n\n\nIn conclusion, the dataset has undergone essential pre-processing steps, rendering it well-prepared for outliers detection and normalization, which are crucial for robust and accurate model development. Missing observations have been imputed using the mean, ensuring that all variables within the dataset are now numerical. These preliminary steps have not only enhanced the dataset completeness, but also set the stage for further advanced data analysis. &gt;&gt;&gt;&gt;&gt;&gt;&gt; d0089948d2fdc4b8622c66a8f2143e64d1f38f80\n\n\n\n\n[1] “Quarterly dialysis facility care compare (QDFCC) report: July 2023.” Centers for Medicare & Medicaid Services (CMS). Available: https://data.cms.gov/provider-data/dataset/2fpu-cgbb. [Accessed: Oct. 11, 2023]"
  },
  {
    "objectID": "analysis.html#data-preparation",
    "href": "analysis.html#data-preparation",
    "title": "5  Analysis",
    "section": "5.1 Data Preparation",
    "text": "5.1 Data Preparation\nThis analysis uses the Dialysis dataset introduced previously in the Dataset chapter. Within this context, we restructured the variables, enhancing their meaningfulness and facilitating inferential analysis. Additionally, the mean imputation approach addressed missing values."
  },
  {
    "objectID": "analysis.html#assumptions",
    "href": "analysis.html#assumptions",
    "title": "5  Analysis",
    "section": "5.2 Assumptions",
    "text": "5.2 Assumptions\nPCA relies on certain assumptions, the fulfillment of which is essential for the validity of this technique.\n\nLinearity: PCA assumes that the dataset is a linear combination of the variables. The variables exhibit relationships among themselves [1].\nImportance of mean and covariance: PCA assumes that the directions of maximum variance will contain good features for discrimination.\nCorrelation between features: PCA assumes a correlation between features.\nNormalization of data: Normalization of data is necessary to apply PCA. Unscaled data can cause relative comparison problems of the dataset [1]. In addition, the data should contain no significant outliers.\nOrthogonality: The principal components are orthogonal to each other.\nSampling adequacy: PCA assumes that there is sampling adequacy."
  },
  {
    "objectID": "analysis.html#feature-scaling",
    "href": "analysis.html#feature-scaling",
    "title": "5  Analysis",
    "section": "5.3 Feature Scaling",
    "text": "5.3 Feature Scaling\n\n5.3.1 Standardization\nIt is important to Mean-Center the data prior to PCA model building to ensure the first Principal Component is in the direction of maximum variance.\n\nStandardization produces Mean, \\(\\mu\\)= 0, and Standard Deviation, \\(\\sigma\\) = 1.\nWe can rewrite this as:\n\\[\nZ = \\frac{{x - \\mu}}{{\\sigma}}\n\\]\n\\[\nZ \\sim N(0,1)\n\\]\n\n\n\nCode\n# Find the index position of the target feature \ntarget_name &lt;- \"expected_survival\"\ntarget_index &lt;- grep(target_name, \n                     colnames(train_data))\n\n\n\n\nCode\n# Standardization Numerical Features\ntrain_data_sc &lt;- scale(train_data[, -target_index])"
  },
  {
    "objectID": "analysis.html#pca-requirements",
    "href": "analysis.html#pca-requirements",
    "title": "5  Analysis",
    "section": "5.4 PCA Requirements",
    "text": "5.4 PCA Requirements\n\n5.4.1 Outliers Detection\n\nThere are some outliers in the data frame including the dependent variable.\nHowever, there are three outliers with no high leverage.\nOutliers are important because these can have a disproportionate influence on results.\n\n\n\nCode\n# Plot a boxplot to visualize potential outliers\nboxplot(train_data, main = \"Outliers Detection\",\n        col = \"steelblue\")\n\n\n\n\n\n\n\nCode\n# Dependent Variable outliers\ntrain_data %&gt;% \n  ggplot(aes(y=expected_survival)) +\n  geom_boxplot(fill=\"steelblue\", alpha=0.75) + \n  xlab(\"Expected Survival\")+\n  ylab(\"\")+\n  ggtitle(\"Dependent Variable Outliers\")\n\n\n\n\n\n\n\n5.4.2 Leverage\n\n\nCode\nset.seed(my_seed)\n\n# Fit regression model\nordinary_model &lt;- lm(expected_survival ~ ., data = train_data)\n\n# Print the model summary\nsummary(ordinary_model)\n\n# Residual Diagnostics\nols_plot_resid_lev(ordinary_model)\n\n\n\n\n\n\n\n5.4.3 Removing Outliers\nAfter removing one outlier from the dataset, we discovered that the final results produced minimal variability. Therefore, we decided to present a model that captures all the data points’ information; thus, no observations will be removed from the final model.\n\n\nCode\n# No Outliers subset\nno_outliers_df &lt;- slice(train_data, -c(56))\n\nset.seed(my_seed)\n\n# Fit regression model\nno_outliers_model &lt;- lm(expected_survival ~ ., data = no_outliers_df)\n\n# Print the model summary\nsummary(no_outliers_model)\n\n# Residual Diagnostics\nols_plot_resid_lev(no_outliers_model)\n\n\n\n\n\n\n\n5.4.4 Correlations\n\nMulticollinearity is present in the data set.\n28 Correlated features were identified using a threshold = 0.30.\n\n\n\nCode\n# Calculate correlations and round to 2 digits\ncorr_matrix &lt;- cor(train_data_sc)\ncorr_matrix &lt;- round(corr_matrix, digits = 2)\n\n# Print names of highly correlated features; threshold &gt; 0.30\nhigh &lt;- findCorrelation(corr_matrix, cutoff = 0.30, names = TRUE)\n\n# Create a data frame with an index column\nhigh_corr_df &lt;- data.frame(\n  Count = 1:length(high),\n  Feature = high\n)\n\n# table format\nkbl(high_corr_df, caption = \"Highly Correlated Features\") %&gt;%\n  kable_paper(\"hover\")\n\n\n\nHighly Correlated Features\n\n\nCount\nFeature\n\n\n\n\n1\nexpected_transfusion\n\n\n2\nbetter_infection\n\n\n3\nexpected_hospitalization\n\n\n4\nexpected_hospital_readmission\n\n\n5\nexpected_fistula\n\n\n6\nprevalent_transplant_waitlist_expected\n\n\n7\nincident_transplant_waitlist_expected\n\n\n8\nexpected_infection\n\n\n9\nworse_survival\n\n\n10\nincident_transplant_waitlist_better\n\n\n11\nbetter_hospital_readmission\n\n\n12\nworse_transfusion\n\n\n13\nworse_hospital_readmission\n\n\n14\nworse_fistula\n\n\n15\nincident_transplant_waitlist_worse\n\n\n16\nbetter_fistula\n\n\n17\nprevalent_transplant_waitlist_better\n\n\n18\nbetter_survival\n\n\n19\nworse_infection\n\n\n20\nphosphorus (5.6 - 7) Mg\n\n\n21\nprevalent_transplant_waitlist_worse\n\n\n22\nphosphorus (3.5 - 4.5) Mg\n\n\n23\nphosphorus &gt; 7Mg\n\n\n24\nbetter_transfusion\n\n\n25\nHgb 10g\n\n\n26\nhypercalcemia_calcium &gt; 10.2Mg\n\n\n27\npediatric_nPCR\n\n\n28\nlong_term_catheter\n\n\n\n\n\n\n\n\n\nCode\ncorrplot::corrplot(corr_matrix, type = \"full\", tl.pos = \"n\")"
  },
  {
    "objectID": "analysis.html#full-model-regression",
    "href": "analysis.html#full-model-regression",
    "title": "5  Analysis",
    "section": "5.5 Full Model Regression",
    "text": "5.5 Full Model Regression\n\nThe Adjusted \\(R^2\\) = 99.99% is an indication of over-fitting, or high variance.\nThis dataset is suitable to apply PCA to find the adequate variance balance.\n\n\n\nCode\nset.seed(my_seed)\n\n# Fit a multiple linear regression model\nfull_model &lt;- lm(expected_survival ~ ., data = train_data)\n\n# Print a summary of the regression model\ntab_model(full_model, title = \"Full Model Regression\", \n          string.p=\"P-value\", string.stat = \"T-score\",\n          string.se = \"Std. Error\",\n          string.resp = \"Response\",\n          string.ci = \"Conf Int.\",\n          show.se=T, show.stat = T,\n           CSS = list(\n             css.depvarhead = 'font-weight: bold; text-align: left;',\n             css.summary = 'color: #10759B; font-weight: bold;'\n           ))\n\n\n\nFull Model Regression\n\n\n\n\n\n\n\n\n\n\n \nexpected_survival\n\n\nPredictors\nEstimates\nStd. Error\nConf Int.\nT-score\nP-value\n\n\n(Intercept)\n93.71\n41.88\n5.73 – 181.69\n2.24\n0.038\n\n\nbetter transfusion\n1.04\n0.75\n-0.53 – 2.62\n1.39\n0.181\n\n\nexpected transfusion\n0.00\n0.03\n-0.07 – 0.07\n0.03\n0.974\n\n\nworse transfusion\n0.13\n0.08\n-0.03 – 0.29\n1.76\n0.096\n\n\nbetter infection\n-0.27\n0.09\n-0.46 – -0.07\n-2.92\n0.009\n\n\nexpected infection\n-0.04\n0.06\n-0.17 – 0.09\n-0.57\n0.574\n\n\nworse infection\n-0.11\n0.27\n-0.68 – 0.46\n-0.41\n0.687\n\n\nKt v 1 2\n0.25\n0.25\n-0.28 – 0.78\n0.99\n0.335\n\n\nKt v 1 7\n-0.00\n0.05\n-0.11 – 0.11\n-0.00\n0.996\n\n\npedriatic Kt v 1 2\n-0.04\n0.03\n-0.11 – 0.03\n-1.21\n0.241\n\n\npediatric Kt v 1 8\n-0.02\n0.01\n-0.04 – 0.00\n-1.89\n0.076\n\n\npediatric nPCR\n0.04\n0.03\n-0.01 – 0.10\n1.75\n0.097\n\n\nbetter fistula\n-0.18\n0.11\n-0.41 – 0.04\n-1.73\n0.101\n\n\nexpected fistula\n0.01\n0.08\n-0.15 – 0.16\n0.08\n0.935\n\n\nworse fistula\n-0.03\n0.11\n-0.25 – 0.19\n-0.28\n0.780\n\n\nlong term catheter\n0.31\n0.07\n0.16 – 0.47\n4.19\n0.001\n\n\nhypercalcemia calcium &gt;\n10 2Mg\n-0.19\n0.09\n-0.37 – -0.00\n-2.13\n0.048\n\n\nphosphorus &lt; 3 5Mg\n0.35\n0.48\n-0.66 – 1.36\n0.73\n0.476\n\n\nphosphorus (3 5 - 4 5) Mg\n-1.73\n0.46\n-2.71 – -0.76\n-3.73\n0.002\n\n\nphosphorus (4 6 - 5 5) Mg\n-1.36\n0.46\n-2.33 – -0.40\n-2.97\n0.008\n\n\nphosphorus (5 6 - 7) Mg\n-0.80\n0.44\n-1.72 – 0.12\n-1.82\n0.085\n\n\nphosphorus &gt; 7Mg\n-1.44\n0.46\n-2.41 – -0.48\n-3.15\n0.005\n\n\nbetter hospitalization\n0.08\n0.32\n-0.59 – 0.76\n0.26\n0.797\n\n\nexpected hospitalization\n0.70\n0.15\n0.38 – 1.03\n4.55\n&lt;0.001\n\n\nworse hospitalization\n0.52\n0.22\n0.05 – 0.98\n2.34\n0.031\n\n\nbetter hospital\nreadmission\n0.38\n0.24\n-0.13 – 0.88\n1.55\n0.139\n\n\nexpected hospital\nreadmission\n0.31\n0.13\n0.03 – 0.60\n2.34\n0.031\n\n\nworse hospital\nreadmission\n0.09\n0.24\n-0.41 – 0.59\n0.39\n0.704\n\n\nbetter survival\n-0.57\n0.15\n-0.88 – -0.27\n-3.94\n0.001\n\n\nworse survival\n-0.91\n0.14\n-1.20 – -0.62\n-6.64\n&lt;0.001\n\n\nincident transplant\nwaitlist better\n0.01\n0.13\n-0.27 – 0.29\n0.09\n0.926\n\n\nincident transplant\nwaitlist expected\n0.03\n0.04\n-0.05 – 0.12\n0.82\n0.421\n\n\nincident transplant\nwaitlist worse\n0.31\n0.12\n0.06 – 0.56\n2.61\n0.018\n\n\nprevalent transplant\nwaitlist better\n0.15\n0.11\n-0.08 – 0.38\n1.36\n0.191\n\n\nprevalent transplant\nwaitlist expected\n0.04\n0.10\n-0.17 – 0.25\n0.41\n0.690\n\n\nprevalent transplant\nwaitlist worse\n0.01\n0.19\n-0.39 – 0.40\n0.03\n0.975\n\n\nHgb 10g\n-0.10\n0.05\n-0.20 – -0.00\n-2.14\n0.046\n\n\nHgb 12g\n-0.36\n0.66\n-1.75 – 1.04\n-0.54\n0.597\n\n\nObservations\n56\n\n\nR2 / R2 adjusted\n1.000 / 1.000"
  },
  {
    "objectID": "analysis.html#pca-implementation",
    "href": "analysis.html#pca-implementation",
    "title": "5  Analysis",
    "section": "5.6 PCA Implementation",
    "text": "5.6 PCA Implementation\n\n5.6.1 SVD - Singular Value Decomposition\nWe will focus on Singular Value Decomposition which is a classic approach for PCA analysis.\nSingular Value Decomposition is a factorization technique used in linear algebra to decompose a matrix into three matrices.\n\n\\(L\\): A matrix whose columns are the left singular vectors of the original matrix.\n\\(D\\): A diagonal matrix whose entries are the singular values of the original matrix.\n\\(R\\): A matrix whose columns are the right singular vectors of the original matrix.\n\nThe SVD is closely related to the eigenvalue decomposition (EVD), which is another factorization technique used in linear algebra. While the EVD can only be applied to square matrices, the SVD can be applied to any matrix, including rectangular matrices. The SVD is also more numerically stable than the EVD, making it a preferred method for many applications.\n\nNote: The Spectral Decomposition approach is used with the princomp() function.\n\n\n\nCode\n# Apply PCA using prcomp()\ndata_pca &lt;- prcomp(train_data_sc, center = TRUE, scale. = TRUE)\npca_summ &lt;- summary(data_pca)$importance\n\n# Transpose the matrix\ntransposed_pca_summ &lt;- t(pca_summ)\n\n# table format\nkbl(transposed_pca_summ, caption = \"Pricipal Components Analysis\",\n    digits = 4) %&gt;%\n  kable_paper(\"hover\")\n\n\n\nPricipal Components Analysis\n\n\n\nStandard deviation\nProportion of Variance\nCumulative Proportion\n\n\n\n\nPC1\n3.8854\n0.4080\n0.4080\n\n\nPC2\n1.8717\n0.0947\n0.5027\n\n\nPC3\n1.8377\n0.0913\n0.5940\n\n\nPC4\n1.7487\n0.0826\n0.6766\n\n\nPC5\n1.4227\n0.0547\n0.7313\n\n\nPC6\n1.2508\n0.0423\n0.7736\n\n\nPC7\n1.1280\n0.0344\n0.8080\n\n\nPC8\n1.0933\n0.0323\n0.8403\n\n\nPC9\n0.9449\n0.0241\n0.8644\n\n\nPC10\n0.9081\n0.0223\n0.8867\n\n\nPC11\n0.8185\n0.0181\n0.9048\n\n\nPC12\n0.7790\n0.0164\n0.9212\n\n\nPC13\n0.6815\n0.0126\n0.9338\n\n\nPC14\n0.6366\n0.0110\n0.9447\n\n\nPC15\n0.5710\n0.0088\n0.9535\n\n\nPC16\n0.5055\n0.0069\n0.9604\n\n\nPC17\n0.5018\n0.0068\n0.9673\n\n\nPC18\n0.4884\n0.0064\n0.9737\n\n\nPC19\n0.4625\n0.0058\n0.9795\n\n\nPC20\n0.4169\n0.0047\n0.9842\n\n\nPC21\n0.3534\n0.0034\n0.9876\n\n\nPC22\n0.3247\n0.0029\n0.9904\n\n\nPC23\n0.2884\n0.0022\n0.9926\n\n\nPC24\n0.2604\n0.0018\n0.9945\n\n\nPC25\n0.2259\n0.0014\n0.9959\n\n\nPC26\n0.2149\n0.0013\n0.9971\n\n\nPC27\n0.1982\n0.0011\n0.9982\n\n\nPC28\n0.1670\n0.0008\n0.9989\n\n\nPC29\n0.1268\n0.0004\n0.9994\n\n\nPC30\n0.1091\n0.0003\n0.9997\n\n\nPC31\n0.0838\n0.0002\n0.9999\n\n\nPC32\n0.0509\n0.0001\n0.9999\n\n\nPC33\n0.0317\n0.0000\n1.0000\n\n\nPC34\n0.0287\n0.0000\n1.0000\n\n\nPC35\n0.0143\n0.0000\n1.0000\n\n\nPC36\n0.0081\n0.0000\n1.0000\n\n\nPC37\n0.0049\n0.0000\n1.0000\n\n\n\n\n\n\n\n\n\n5.6.2 PCA - Elements\n\nThe values in `data_pca$x` are the coordinates of each observation in the new principal component space. These coordinates are the scores for each observation along each principal component.\nThe eigenvectors of the covariance, or correlation matrix of the data represent the directions of maximum variance, or information in the dataset.\n\n\n\nCode\n# Principal Component scores vector\npc_scores &lt;- data_pca$x\n\n# Std Deviation of Components\ncomponent_sdev &lt;- data_pca$sdev\n\n# Eigenvector, or Loadings\npc_loadings &lt;- data_pca$rotation\n\n# Mean of variables\ncomponent_mean &lt;- data_pca$center \n\n# Scaling factor of Variables\ncomponent_scale &lt;- data_pca$scale\n\n\n\n\n5.6.3 Loadings of First Two Components\n\nThe loading `data_pca$rotation` are the weights assigned to each original variable for that particular principal component.\n\n\n\nCode\n# Access the loadings for the first two principal components\nloadings_first_two_components &lt;- pc_loadings[, 1:2]\n\n# Print the loadings for the first two principal components\n# print(loadings_first_two_components)\n\n# table format\nkbl(loadings_first_two_components, \n    caption = \"Loadings of First Two Principal Components\",\n    digits = 4) %&gt;%\n  kable_paper(\"hover\")\n\n\n\nLoadings of First Two Principal Components\n\n\n\nPC1\nPC2\n\n\n\n\nbetter_transfusion\n0.0506\n0.0151\n\n\nexpected_transfusion\n0.2536\n-0.0214\n\n\nworse_transfusion\n0.2058\n-0.1647\n\n\nbetter_infection\n0.2526\n-0.0073\n\n\nexpected_infection\n0.2455\n-0.0652\n\n\nworse_infection\n0.1381\n0.0637\n\n\nKt_v_1.2\n0.0031\n0.0081\n\n\nKt_v_1.7\n-0.0078\n0.0444\n\n\npedriatic_Kt_v_1.2\n-0.0636\n0.0527\n\n\npediatric_Kt_v_1.8\n-0.0139\n0.0028\n\n\npediatric_nPCR\n-0.0394\n0.0768\n\n\nbetter_fistula\n0.1701\n0.1849\n\n\nexpected_fistula\n0.2521\n-0.0558\n\n\nworse_fistula\n0.1932\n-0.0481\n\n\nlong_term_catheter\n-0.0054\n0.0409\n\n\nhypercalcemia_calcium &gt; 10.2Mg\n-0.0276\n0.1049\n\n\nphosphorus &lt; 3.5Mg\n0.0161\n0.3759\n\n\nphosphorus (3.5 - 4.5) Mg\n0.0420\n0.4258\n\n\nphosphorus (4.6 - 5.5) Mg\n0.0888\n0.2665\n\n\nphosphorus (5.6 - 7) Mg\n-0.0954\n-0.3297\n\n\nphosphorus &gt; 7Mg\n-0.0293\n-0.4400\n\n\nbetter_hospitalization\n0.1555\n0.0398\n\n\nexpected_hospitalization\n0.2535\n-0.0353\n\n\nworse_hospitalization\n0.1863\n-0.1048\n\n\nbetter_hospital_readmission\n0.2100\n-0.0462\n\n\nexpected_hospital_readmission\n0.2537\n-0.0414\n\n\nworse_hospital_readmission\n0.2010\n-0.0432\n\n\nbetter_survival\n0.1523\n0.1688\n\n\nworse_survival\n0.2288\n-0.0662\n\n\nincident_transplant_waitlist_better\n0.2016\n0.1513\n\n\nincident_transplant_waitlist_expected\n0.2499\n-0.0578\n\n\nincident_transplant_waitlist_worse\n0.1913\n-0.0199\n\n\nprevalent_transplant_waitlist_better\n0.1618\n0.1763\n\n\nprevalent_transplant_waitlist_expected\n0.2501\n-0.0703\n\n\nprevalent_transplant_waitlist_worse\n0.1202\n-0.2285\n\n\nHgb 10g\n-0.0299\n-0.0804\n\n\nHgb 12g\n-0.0006\n0.1765\n\n\n\n\n\n\n\n\n\n5.6.4 PCA - Cumulative Variance\n\n\nCode\n# Proportion of variance explained by each PC\nvariance_explained &lt;- component_sdev^2 / sum(component_sdev^2)\n\n# Cumulative proportion of variance explained\ncumulative_variance_explained &lt;- cumsum(variance_explained)\n\n# Create a data frame with an index column\ncumulative_variance_explained_df &lt;- data.frame(\n  Pincipal_Component = 1:length(cumulative_variance_explained),\n  Cumulative_Variance_Explained = cumulative_variance_explained\n)\n\n# Create a kable table with an index column\nkbl(cumulative_variance_explained_df, align = \"cl\",\n    caption = \"PCA: Cumulative Variance Explained\",\n    digits = 4) %&gt;%\n  kable_paper(\"hover\")\n\n\n\nPCA: Cumulative Variance Explained\n\n\nPincipal_Component\nCumulative_Variance_Explained\n\n\n\n\n1\n0.4080\n\n\n2\n0.5027\n\n\n3\n0.5940\n\n\n4\n0.6766\n\n\n5\n0.7313\n\n\n6\n0.7736\n\n\n7\n0.8080\n\n\n8\n0.8403\n\n\n9\n0.8644\n\n\n10\n0.8867\n\n\n11\n0.9048\n\n\n12\n0.9212\n\n\n13\n0.9338\n\n\n14\n0.9447\n\n\n15\n0.9535\n\n\n16\n0.9604\n\n\n17\n0.9673\n\n\n18\n0.9737\n\n\n19\n0.9795\n\n\n20\n0.9842\n\n\n21\n0.9876\n\n\n22\n0.9904\n\n\n23\n0.9927\n\n\n24\n0.9945\n\n\n25\n0.9959\n\n\n26\n0.9971\n\n\n27\n0.9982\n\n\n28\n0.9989\n\n\n29\n0.9994\n\n\n30\n0.9997\n\n\n31\n0.9999\n\n\n32\n0.9999\n\n\n33\n1.0000\n\n\n34\n1.0000\n\n\n35\n1.0000\n\n\n36\n1.0000\n\n\n37\n1.0000\n\n\n\n\n\n\n\n\n\n5.6.5 PCA - Number of Principal Components\n\nWe can conclude that 9 Principal Components explain 86% of the variance.\n\n\n\nCode\n# Retain components that explain a percentage of the variance\nnum_components &lt;- which(cumulative_variance_explained &gt;= 0.86)[1]\n\n# Select the desired number of principal components\nselected_pcs &lt;- pc_scores[, 1:num_components]\n\n# table format\nkbl(selected_pcs, caption = \"Components Explaining 86% Variance\",\n    digits = 4) %&gt;%\n  kable_paper(\"hover\", full_width = F)\n\n\n\nComponents Explaining 86% Variance\n\n\nPC1\nPC2\nPC3\nPC4\nPC5\nPC6\nPC7\nPC8\nPC9\n\n\n\n\n-3.1378\n0.7718\n-0.7364\n-0.9222\n-0.3593\n0.3854\n1.7645\n0.7137\n-1.2776\n\n\n0.9109\n-1.3736\n-0.8907\n-0.0460\n0.0228\n0.3267\n1.9095\n0.3203\n0.3158\n\n\n-1.3650\n-1.7656\n-0.1449\n0.2592\n-1.2857\n-0.3762\n-0.7856\n-0.9204\n-1.2626\n\n\n-3.0594\n0.3348\n-0.0141\n-0.1395\n0.0920\n-0.2825\n-0.1286\n0.1373\n0.0780\n\n\n-0.1991\n-0.2073\n-0.7149\n-1.3756\n-1.1993\n0.0319\n0.7499\n0.7160\n-0.1954\n\n\n15.2032\n2.6187\n-7.7363\n4.0519\n-0.8244\n-2.8218\n-0.3937\n0.7540\n0.1236\n\n\n-1.1596\n1.1216\n-0.7112\n-0.6842\n0.2286\n-0.3821\n-0.5148\n-1.3731\n0.5560\n\n\n-1.7567\n2.4464\n0.2336\n-0.7871\n-0.1098\n-1.0603\n-0.1434\n-1.6411\n1.1462\n\n\n-2.5605\n1.0785\n-0.0207\n-0.0018\n-0.2474\n1.1930\n-0.1234\n1.6484\n1.1223\n\n\n-2.2725\n0.7670\n-0.0552\n-1.0045\n2.4430\n-1.8092\n1.3011\n0.0402\n0.7853\n\n\n10.2101\n-3.0951\n5.5631\n-2.7079\n-3.2328\n-1.4788\n-1.0195\n0.3946\n0.0182\n\n\n5.1286\n-1.7705\n1.7849\n-0.1628\n0.5176\n-0.3672\n1.2737\n0.3839\n-0.1914\n\n\n-3.4958\n-4.4206\n-3.1425\n0.0404\n-0.7928\n0.4217\n0.1087\n-1.1395\n-1.5791\n\n\n-1.7134\n0.8230\n-1.9663\n-1.0871\n0.7505\n0.4357\n1.1010\n0.8853\n-1.1906\n\n\n-1.9511\n0.9075\n-0.3459\n-1.4707\n-0.7735\n-0.7810\n-1.0116\n-1.4774\n0.2215\n\n\n-2.6296\n0.9149\n-0.5263\n-1.3484\n-0.9348\n0.5181\n0.3570\n0.8863\n-0.4488\n\n\n4.7463\n0.3146\n2.3709\n-0.2528\n0.8329\n1.4290\n-0.8492\n0.0128\n-0.0479\n\n\n0.3868\n-0.9290\n0.6870\n-0.6117\n1.5374\n-0.1113\n0.2265\n0.7691\n-0.8385\n\n\n-1.6767\n0.2850\n-0.9842\n-1.8133\n-0.8136\n0.7518\n0.8450\n-0.2605\n0.7893\n\n\n-0.7345\n-1.3222\n0.3700\n-0.8448\n2.0553\n-1.6018\n0.7571\n-1.1866\n1.6751\n\n\n0.9393\n-0.6999\n-0.1399\n-0.5978\n-0.0203\n-0.0046\n1.3170\n0.4944\n0.4746\n\n\n-0.8326\n1.5874\n-0.7312\n0.2910\n0.1199\n1.1100\n-1.6455\n1.1312\n-0.0448\n\n\n0.8725\n1.0451\n0.2775\n0.2175\n-0.6226\n0.5429\n-0.2118\n0.9699\n1.6165\n\n\n-2.7730\n0.5328\n-0.3857\n-0.9341\n0.8943\n-2.7237\n-0.4738\n-2.6266\n1.1451\n\n\n2.0146\n0.0014\n0.6403\n-0.6929\n-0.1677\n0.4555\n-0.3840\n0.2754\n1.0045\n\n\n-1.1376\n0.6676\n0.0612\n0.2444\n-0.4465\n0.9265\n-0.6966\n0.9414\n0.1757\n\n\n0.1256\n-0.9951\n1.1503\n-0.4897\n0.7108\n1.3854\n0.0279\n-0.3615\n-0.4521\n\n\n-3.6486\n-5.1247\n0.0491\n6.3322\n-1.4438\n1.4726\n-0.7719\n-0.9060\n2.9209\n\n\n-0.3307\n0.2793\n-0.0985\n-0.3388\n-0.5950\n-0.5761\n2.0137\n0.0524\n0.9485\n\n\n-3.1386\n-2.4847\n-2.0044\n1.0661\n-0.5877\n-0.0292\n-0.7689\n-0.0432\n-0.9302\n\n\n1.8304\n-0.8659\n-0.6292\n-0.2888\n-0.3585\n1.1522\n1.4099\n-0.2387\n0.1117\n\n\n-2.6300\n1.8820\n1.4790\n1.5197\n0.1484\n0.9943\n1.0138\n1.7547\n-0.2904\n\n\n-1.9654\n1.4437\n0.4239\n-1.4217\n0.3452\n0.1489\n0.2267\n0.8292\n0.0537\n\n\n-2.9434\n-0.4453\n-0.1869\n0.0501\n-0.3471\n-0.3884\n-1.8441\n0.4520\n0.3853\n\n\n1.9335\n4.2274\n-1.5429\n-0.8354\n-0.5412\n2.3739\n-0.2919\n0.2478\n0.0526\n\n\n-1.4611\n0.5551\n-1.4467\n-0.2732\n0.4168\n-0.3335\n0.0306\n1.0760\n-0.1292\n\n\n-1.6820\n-0.9253\n-0.3177\n-0.2737\n-0.7852\n0.2036\n-0.4687\n0.5302\n-0.4388\n\n\n6.7595\n3.6388\n1.0562\n2.3514\n2.4970\n3.4372\n-1.4276\n-3.6075\n-1.6018\n\n\n3.4507\n-1.1824\n2.5699\n-1.1129\n-0.0546\n1.4361\n-0.6591\n-1.0345\n-0.1605\n\n\n-1.0984\n-1.5241\n-0.5320\n-0.4777\n-0.9995\n-0.8030\n-0.1950\n-1.6084\n-0.6964\n\n\n-1.9193\n-0.0165\n-1.0806\n-0.5872\n-0.6324\n-0.2014\n-1.3158\n-1.3027\n0.1718\n\n\n3.4962\n1.5199\n1.3109\n-0.3007\n2.5985\n1.0499\n-0.2313\n-0.0969\n0.8464\n\n\n-0.2522\n3.0718\n2.1407\n-1.9255\n-2.2719\n-3.4093\n-2.1544\n0.2271\n-1.2587\n\n\n-3.0135\n-0.6858\n-1.1712\n-0.8551\n-0.4428\n0.8391\n-1.0039\n0.4085\n-0.1121\n\n\n0.3392\n-0.5133\n0.0391\n-0.1766\n-0.5924\n1.0593\n1.1663\n0.5207\n-0.3248\n\n\n-2.1136\n2.6100\n0.5330\n-0.8478\n0.0752\n0.1416\n1.0927\n-0.3588\n1.3478\n\n\n1.3707\n-2.9104\n1.0848\n1.3163\n6.1381\n-2.1436\n0.9717\n0.1946\n-1.2873\n\n\n13.0708\n-2.7257\n0.4257\n-0.4752\n-0.7834\n0.5789\n0.9620\n0.5196\n-0.2282\n\n\n-2.6465\n-0.3807\n-0.6944\n1.0365\n-0.9202\n0.4536\n0.2146\n-0.6048\n-0.7532\n\n\n1.7505\n-0.1798\n-0.2689\n-0.3411\n0.6075\n-0.7767\n-0.0058\n0.2781\n1.5233\n\n\n-3.3725\n3.5365\n5.3271\n7.7627\n-2.3163\n-1.7961\n2.1724\n-0.1875\n-1.1131\n\n\n-3.1242\n-1.0424\n0.8044\n2.1331\n2.8559\n-0.9073\n-3.9502\n3.0657\n-0.2529\n\n\n-1.0177\n-1.6718\n-1.8286\n0.3950\n-0.4653\n0.8616\n-0.2457\n-0.1711\n-0.3817\n\n\n-0.3396\n0.7505\n0.9596\n-0.3014\n0.5726\n0.0189\n-0.0433\n0.0637\n0.6271\n\n\n-2.2360\n-0.6559\n0.7765\n0.2318\n-0.2785\n-0.3448\n-0.0371\n0.7968\n-1.0752\n\n\n-3.1511\n0.1807\n-1.0702\n-0.4912\n-0.2143\n-0.6257\n0.7831\n-1.3442\n-1.6736"
  },
  {
    "objectID": "analysis.html#visualization",
    "href": "analysis.html#visualization",
    "title": "5  Analysis",
    "section": "5.7 Visualization",
    "text": "5.7 Visualization\n\n5.7.1 Scree Plot - Cumulative Variance Explained\n\nPC1 explains 40.8% variance.\nPC2 explains 9.5% variance.\n\n\n\nCode\nfviz_eig(data_pca, addlabels = TRUE)\n\n\n\n\n\n\n\n5.7.2 Biplot\n\nThe correlation between a variable and a principal component (PC) is used as the coordinates of the variable on the PC. The representation of variables differs from the plot of the observations: The observations are represented by their projections, but the variables are represented by their correlations [2].\nPC1 is represented in black which displays the longest distance of its projection.\nPC2 is represented in blue which displays a shorter distance as expected.\n\n\n\nCode\nfviz_pca_biplot(data_pca, \n                geom = c(\"point\", \"arrow\"),\n                geom.var = \"arrow\")\n\n\n\n\n\n\n\n5.7.3 Correlation Circle\nThe plot below is also known as variable correlation plots. It shows the relationships between all variables. It can be interpreted as follow:\n\nPositively correlated variables are grouped together.\nNegatively correlated variables are positioned on opposite sides of the plot origin (opposed quadrants).\nThe distance between variables and the origin measures the quality of the variables on the factor map. Variables that are away from the origin are well represented on the factor map.\n\n\n\nCode\n# Control variable colors using their contributions\nfviz_pca_var(data_pca, col.var = \"contrib\",\n   gradient.cols = c(\"white\", \"blue\", \"red\"),\n   geom.var = \"arrow\",\n   ggtheme = theme_minimal())\n\n\n\n\n\n\n\n5.7.4 Variable Contribution\nTop variable contribution for the first two principal components.\n\n\nCode\n# Contributions of variables to PC1\npc2_contribution &lt;- fviz_contrib(data_pca, choice = \"var\", axes = 1, top = 20)\n\n# Modify the theme to rotate X-axis labels to 90 degrees\npc2_contribution +\n  theme(\n    axis.text.x = element_text(angle = 0),\n    plot.title = element_text(hjust = 0)  # horizontal justification\n  ) +\n  coord_flip() +\n  labs(title = \"Contribution of Variables to PC1\",\n       y = \"Percentage Contribution\",\n       x = \"\",\n       caption = \"PC1 explains 40.8% variance\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1,\n                                                     accuracy = 1))\n\n\n\n\n\nCode\n# Contributions of variables to PC2\npc2_contribution &lt;- fviz_contrib(data_pca, choice = \"var\", axes = 2, top = 12)\n\n# Modify the theme to rotate X-axis labels to 90 degrees\npc2_contribution +\n  theme(\n    axis.text.x = element_text(angle = 0),\n    plot.title = element_text(hjust = 0)  # horizontal justification\n  ) +\n  coord_flip() +\n  labs(title = \"Contribution of Variables to PC2\",\n       y = \"Percentage Contribution\",\n       x = \"\",\n       caption = \"PC2 explains 9.5% variance\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1,\n                                                     accuracy = 1))"
  },
  {
    "objectID": "analysis.html#model-building",
    "href": "analysis.html#model-building",
    "title": "5  Analysis",
    "section": "5.8 Model Building",
    "text": "5.8 Model Building\n\n5.8.1 Data Splitting into Training & Test set\n\n\nCode\n# reproducible random sampling\nset.seed(my_seed)  \n \n# Create Target y-variable for the training set\ny &lt;- train_data$expected_survival  \n# Split the data into training and test sets \nsplit &lt;- sample.split(y, SplitRatio = 0.7) \ntraining_set &lt;- subset(train_data, split == TRUE) \ntest_set &lt;- subset(train_data, split == FALSE) \n\n\n\n\n5.8.2 Feature Scaling: Standardization\n\nStandardization ensures all features are on the same scale, and this method is less sensitive to outliers.\n\n\n\nCode\n# Feature Scaling: Standardization\n# Perform centering and scaling on the training and test sets\nsc &lt;- preProcess(training_set[, -target_index], \n                 method = c(\"center\", \"scale\"))\ntraining_set[, -target_index] &lt;- predict(\n  sc, training_set[, -target_index])\ntest_set[, -target_index] &lt;- predict(sc, test_set[, -target_index])\n\n\n\n\n5.8.3 Applying PCA to Training & Test sets\n\n\nCode\n# Perform Principal Component Analysis (PCA) preprocessing on the training data\npca &lt;- preProcess(training_set[, -target_index], \n                  method = 'pca', pcaComp = 8)\n\n# Apply PCA transformation to original training set\ntraining_set &lt;- predict(pca, training_set)\n\n# Reorder columns, moving the dependent feature index to the end\ntraining_set &lt;- training_set[c(2:9, 1)]\n\n# Apply PCA transformation to original test set\ntest_set &lt;- predict(pca, test_set)\n\n# Reorder columns, moving the dependent feature index to the end\ntest_set &lt;- test_set[c(2:9, 1)]"
  },
  {
    "objectID": "analysis.html#pca-full-model-8-principal-components",
    "href": "analysis.html#pca-full-model-8-principal-components",
    "title": "5  Analysis",
    "section": "5.9 PCA Full Model: 8 Principal Components",
    "text": "5.9 PCA Full Model: 8 Principal Components\n\n\nCode\n# reproducible random sampling\nset.seed(my_seed)\n\n# Fit a multiple linear regression model\npca_full_model &lt;- lm(expected_survival ~ ., data = training_set)\n\n# Print a summary of the regression model\ntab_model(pca_full_model, title = \"8 Principal Components Regression\",\n          string.p=\"P-value\", string.stat = \"T-score\",\n          string.se = \"Std. Error\",\n          string.resp = \"Response\",\n          string.ci = \"Conf Int.\",\n          show.se=T, show.stat = T,\n          CSS = list(\n             css.depvarhead = 'font-weight: bold; text-align: left;',\n             css.summary = 'color: #10759B; font-weight: bold;'\n           ))\n\n\n\n8 Principal Components Regression\n\n\n \nexpected_survival\n\n\nPredictors\nEstimates\nStd. Error\nConf Int.\nT-score\nP-value\n\n\n(Intercept)\n97.05\n2.84\n91.25 – 102.85\n34.19\n&lt;0.001\n\n\nPC1\n29.40\n0.71\n27.95 – 30.86\n41.22\n&lt;0.001\n\n\nPC2\n4.59\n1.33\n1.87 – 7.31\n3.44\n0.002\n\n\nPC3\n-1.11\n1.64\n-4.46 – 2.24\n-0.68\n0.504\n\n\nPC4\n4.99\n1.75\n1.42 – 8.56\n2.85\n0.008\n\n\nPC5\n-3.27\n2.25\n-7.86 – 1.31\n-1.46\n0.156\n\n\nPC6\n6.98\n2.44\n2.01 – 11.95\n2.87\n0.008\n\n\nPC7\n-6.60\n2.56\n-11.83 – -1.37\n-2.58\n0.015\n\n\nPC8\n3.80\n2.82\n-1.96 – 9.56\n1.35\n0.188\n\n\nObservations\n39\n\n\nR2 / R2 adjusted\n0.983 / 0.979\n\n\n\n\n\n\n\nCode\n# Calculate PRESS\n# cat(\"PRESS: \", PRESS(pca_full_model), \"\\n\")\nPRESS_8pc &lt;- PRESS(pca_full_model)\n# Calculate predicted R^2\n# cat(\"Predicted R^2: \", pred_r_squared(pca_full_model), \"\\n\")\nR2_8pcs &lt;- pred_r_squared(pca_full_model)\n\npredict_8pc &lt;- cbind(PRESS_8pc, R2_8pcs)\n# Print PRESS, predicted R^2\n# table format\nkbl(predict_8pc, caption = \"8 Principal Components Prediction Metrics\",\n    digits = 4) %&gt;%\n  kable_paper(\"hover\", full_width = F)\n\n\n\n8 Principal Components Prediction Metrics\n\n\nPRESS_8pc\nR2_8pcs\n\n\n\n\n31662.39\n0.943\n\n\n\n\n\n\n\n\n5.9.1 Visualization of Uncorrelated PCA Matrix\n\n\nCode\n# Visual of Principal Components un-correlation\ncorr_matrix &lt;- cor(training_set)\nggcorrplot(corr_matrix)"
  },
  {
    "objectID": "analysis.html#pca-2-principal-components",
    "href": "analysis.html#pca-2-principal-components",
    "title": "5  Analysis",
    "section": "5.10 PCA: 2 Principal Components",
    "text": "5.10 PCA: 2 Principal Components\n\n\nCode\n# Create a subset with 2 principal components\nsignificant_pcs = c(1,2,9)\ntrain_pca &lt;- training_set[, significant_pcs]\ntest_pca &lt;- test_set[, significant_pcs]\n\n\n\n\nCode\n# reproducible random sampling\nset.seed(my_seed)\n\n# Fit a multiple linear regression model\nreg_model &lt;- lm(expected_survival ~ ., \n                data = train_pca)\n\n# Print a summary of the regression model\ntab_model(reg_model, title = \"2 Principal Components Regression\",\n          string.p=\"P-value\", string.stat = \"T-score\",\n          string.se = \"Std. Error\",\n          string.resp = \"Response\",\n          string.ci = \"Conf Int.\",\n          show.se=T, show.stat = T,\n          CSS = list(\n             css.depvarhead = 'font-weight: bold; text-align: left;',\n             css.summary = 'color: #10759B; font-weight: bold;'\n           ))\n\n\n\n2 Principal Components Regression\n\n\n \nexpected_survival\n\n\nPredictors\nEstimates\nStd. Error\nConf Int.\nT-score\nP-value\n\n\n(Intercept)\n97.05\n3.58\n89.78 – 104.32\n27.07\n&lt;0.001\n\n\nPC1\n29.40\n0.90\n27.58 – 31.23\n32.64\n&lt;0.001\n\n\nPC2\n4.59\n1.68\n1.18 – 8.00\n2.73\n0.010\n\n\nObservations\n39\n\n\nR2 / R2 adjusted\n0.968 / 0.966\n\n\n\n\n\n\n\nCode\n# Calculate PRESS\n# cat(\"PRESS: \", PRESS(reg_model), \"\\n\")\nPRESS_2pc &lt;- PRESS(reg_model)\n\n# Calculate predicted R^2\n# cat(\"Predicted R^2: \", pred_r_squared(reg_model), \"\\n\")\nR2_2pc &lt;- pred_r_squared(reg_model)\n\n# Print 2PC prediction results\npredict_2pc &lt;- cbind(PRESS_2pc, R2_2pc)\n\n# table format\nkbl(predict_2pc, caption = \"2 Principal Components Prediction Metrics\",\n    digits = 4) %&gt;%\n  kable_paper(\"hover\", full_width = F)\n\n\n\n2 Principal Components Prediction Metrics\n\n\nPRESS_2pc\nR2_2pc\n\n\n\n\n25699.6\n0.9538\n\n\n\n\n\n\n\n\n5.10.1 Principal Components Regression\n\nPCA is used to calculate principal components that can then be used in principal components regression. This type of regression is often used when multicollinearity exists between predictors in a data set.\n\n\n\nCode\n# reproducible random sampling\nset.seed(my_seed)\n\ny = train_pca$expected_survival\n\n# fit PCR\npcr_model &lt;- pcr(y ~ PC1+PC2, data=train_pca, validation=\"CV\")\nprint(pcr_model)\n\n\nPrincipal component regression, fitted with the singular value decomposition algorithm.\nCross-validated using 10 random segments.\nCall:\npcr(formula = y ~ PC1 + PC2, data = train_pca, validation = \"CV\")\n\n\nCode\n# table format\nkbl(pcr_model$residuals, caption = \"PCA Residuals\",\n    digits = 4) %&gt;%\n  kable_paper(\"hover\", full_width = F)\n\n\n\nPCA Residuals\n\n\n\ny.1 comps\ny.2 comps\n\n\n\n\n1\n0.1506\n-0.7094\n\n\n2\n14.8415\n8.7438\n\n\n3\n-9.9048\n-15.6499\n\n\n4\n-11.9950\n-10.5934\n\n\n5\n14.5581\n7.4172\n\n\n6\n10.5628\n-4.1105\n\n\n7\n-1.1997\n-1.8621\n\n\n8\n-13.8770\n-8.7908\n\n\n10\n-10.6707\n-7.5478\n\n\n13\n15.9325\n-6.8066\n\n\n14\n-28.4995\n-32.2191\n\n\n15\n13.7912\n10.2807\n\n\n19\n2.2654\n-4.9708\n\n\n20\n20.7004\n18.6124\n\n\n22\n-22.7913\n-18.7054\n\n\n24\n0.3036\n-1.8158\n\n\n27\n15.1056\n16.6785\n\n\n29\n-18.5425\n-18.3174\n\n\n30\n7.9759\n-3.5721\n\n\n31\n61.8084\n55.7883\n\n\n32\n-20.9204\n-5.0790\n\n\n33\n-12.8183\n-9.2901\n\n\n34\n1.6594\n-0.6758\n\n\n35\n-17.3032\n-12.3010\n\n\n36\n-17.2435\n-19.9354\n\n\n37\n-4.2019\n-9.4719\n\n\n38\n-90.8171\n-71.1562\n\n\n39\n57.1428\n59.6527\n\n\n41\n10.0589\n4.0816\n\n\n42\n18.5721\n29.7334\n\n\n44\n3.2955\n-4.0228\n\n\n45\n8.2807\n7.3105\n\n\n46\n-17.5634\n-10.1654\n\n\n49\n14.4348\n13.0494\n\n\n50\n5.5387\n3.5868\n\n\n51\n-9.4323\n29.4206\n\n\n54\n10.5787\n15.4795\n\n\n55\n-1.1796\n1.1198\n\n\n56\n1.4025\n-3.1866\n\n\n\n\n\n\n\n\n\n5.10.2 PCA: Cross-Validation Model\n\n\nCode\n# reproducible random sampling\nset.seed(my_seed)\n\n# Cross-validation with n folds\nk_10 &lt;- trainControl(method = \"cv\", number = 10)\n\n# training the model \nmodel_cv &lt;- train(expected_survival ~ ., \n                  data = train_pca,\n                  method = \"lm\",\n                  trControl = k_10)\n\n# Print Model Performance\nprint(model_cv)\n\n\nLinear Regression \n\n39 samples\n 2 predictor\n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 35, 35, 35, 35, 35, 35, ... \nResampling results:\n\n  RMSE     Rsquared   MAE     \n  21.7825  0.9761582  16.14872\n\nTuning parameter 'intercept' was held constant at a value of TRUE\n\n\nCode\n# Metrics\ncv_results = model_cv$results\nkbl(cv_results, caption = \"PCA: Cross-Validation Metrics\",\n    digits = 4) %&gt;%\n  kable_paper(\"hover\", full_width = F)\n\n\n\nPCA: Cross-Validation Metrics\n\n\nintercept\nRMSE\nRsquared\nMAE\nRMSESD\nRsquaredSD\nMAESD\n\n\n\n\nTRUE\n21.7825\n0.9762\n16.1487\n14.0372\n0.0377\n8.5694"
  },
  {
    "objectID": "analysis.html#predictions",
    "href": "analysis.html#predictions",
    "title": "5  Analysis",
    "section": "5.11 Predictions",
    "text": "5.11 Predictions\n\n\nCode\n# Find the index position of the target feature\npred_target_index &lt;- grep(target_name, \n                     colnames(test_pca))\n#cat(\"Target Feature Index =\", pred_target_index)\n\n# Create Predicted Target Feature (y-test) \ny_test &lt;- test_pca[pred_target_index]\n\n\n\n\nCode\n# Predictions using the Cross-Validation model\ny_pred = predict(model_cv, newdata = test_pca[, -pred_target_index])\n\n\n\n\nCode\n# Prediction Results from y_predictions\ny_pred &lt;- round(y_pred, digits = 0)\n\n\n\n\nCode\n# Transform y_test from data frame to numeric\ny_test &lt;- as.numeric(unlist(y_test))\n\nprediction_comparison &lt;- cbind(y_pred, y_test)\n# table format\nkbl(prediction_comparison) %&gt;%\n  kable_paper(\"hover\", full_width = F)\n\n\n\n\n\n\ny_pred\ny_test\n\n\n\n\n9\n35\n16\n\n\n11\n520\n442\n\n\n12\n310\n318\n\n\n16\n26\n25\n\n\n17\n298\n284\n\n\n18\n125\n152\n\n\n21\n159\n160\n\n\n23\n149\n141\n\n\n25\n191\n197\n\n\n26\n81\n95\n\n\n28\n2\n2\n\n\n40\n86\n78\n\n\n43\n113\n38\n\n\n47\n182\n171\n\n\n48\n585\n657\n\n\n52\n33\n7\n\n\n53\n88\n92\n\n\n\n\n\n\n\n\n5.11.1 Prediction Metrics\n\n\nCode\n# Calculate Mean Absolute Error (MAE)\nMAE_value &lt;- mae(y_pred, y_test)\n#cat(\"MAE =\", mae_value)\n\n# Calculate MSE\nMSE_predict &lt;- mean((y_pred - y_test)^2)\n#cat(\"\\nMSE =\", mse_predict)\n\n# Calculate RMSE\nRMSE_predict &lt;- sqrt(mean((y_pred - y_test)^2))\n#cat(\"\\nRMSE =\", rmse_predict)\n\n# Calculate R-squared (R^2)\npredicted_R2 &lt;- 1 - sum((y_test - y_pred)^2) / \n  sum((y_test - mean(y_test))^2)\n# cat(\"\\nPredicted R^2 =\", predicted_r2)\n\nprediction_metrics_df &lt;- cbind(MAE_value, MSE_predict,\n                               RMSE_predict, predicted_R2)\n# table format\nkbl(prediction_metrics_df, digits = 4) %&gt;%\n  kable_paper(\"hover\", full_width = F)\n\n\n\n\n\nMAE_value\nMSE_predict\nRMSE_predict\npredicted_R2\n\n\n\n\n21.8824\n1142.235\n33.797\n0.96"
  },
  {
    "objectID": "analysis.html#training-conclusion",
    "href": "analysis.html#training-conclusion",
    "title": "5  Analysis",
    "section": "5.12 Training Conclusion",
    "text": "5.12 Training Conclusion\nIn conclusion, this project has demonstrated the effectiveness of Principal Component Analysis (PCA) in dimension reduction with the following key points:\n\nPCA was able to reduce from 37 features down to just 2 principal components.\nThe best score of R^2 = 97.61% was from the Linear Regression with Cross-validation model.\nThe predicted R^2 = 96%\nThe average deviation between the predicted values, and observed values for ‘Expected Survival’ is RMSE = 33.8.\nThe model has not been exposed to unseen data with a large amount of observations to asses its robustness, and reliability.\n\n\n\n\n\n[1] F. Chumney, “PCA, EFA, CFA,” pp. 2–3, 6, Sep., 2012, Available: https://www.westga.edu/academics/research/vrc/assets/docs/PCA-EFA-CFA_EssayChumney_09282012.pdf\n\n\n[2] H. Abdi and L. J. Williams, “Principal component analysis,” WIREs Computational Statistics, vol. 2, no. 4, pp. 433–459, 2010, doi: https://doi.org/10.1002/wics.101. Available: https://wires.onlinelibrary.wiley.com/doi/abs/10.1002/wics.101"
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "6  Results",
    "section": "",
    "text": "The Dialysis dataset consists of 55 observations of 39 variables with 1 discrete variable (States/Territories) and 38 continuous variables. For the principal component analysis, 37 of the 38 continuous variables were used; the variable expected_survival was excluded from PCA in order to use it as a target for model building in the latter part of the analysis.\nPrincipal component analysis was performed using a singular value decomposition approach. Among the resulting principal components, the first PC captures 40.80% of the variance in the data, and the first two principal components capture 50.27% of the variance. The first four PCs capture 67.66% of the variance, or just over two-thirds; after the fourth PC, the variance captured by each successive PC begins to diminish relative to PCs one through four. The first ten PCs capture 88.67% of the variance, and in terms of dimensionality reduction over 90% of the information in the dataset can be explained by only 11 PCs when compared to the original 38 continuous variables.\nThe variables which contribute the most to PC1 are expected_hospital_readmission, expected_transfusion, and expected_hospitalization, although the percent of total contribution to PC1 by any one variable is not outsized relative to the remaining variables. PC2, which is orthogonal to PC1, has relatively large contributions from the five variables measuring levels of phosphorus; patterns or trends in the data such as these can be further explored using other methodologies after being highlighted in PCA [1].\nFrom here, the analysis extends PCA via model building using linear regression with a technique known as principal component regression, with expected_survival used as the response variable. The data is first split into training and testing sets; then the data is centered and scaled, after which PCA is applied to each set. The first model is created for illustrative purposes, using 8 principle components from the training set of 39 observations. The estimates and significance of each PC regressor demonstrates the differences between variance captured from the data and usefulness in a linear model; for example, PC4 is a significant regressor despite capturing less variance than PC3 in the training data.\nThe analysis concludes by building and comparing two linear regression models using the first two prinicipal components. The first model is a straightforward linear model using the lm() function from the stats package in R [2]. The second model uses 10-fold cross-validation for a linear model using the train() and trainControl() functions from the caret package in R [3]. Both models produce an \\(R^2\\) above 96% and a predicted \\(R^2\\) above 95% with a 1% advantage on the cross-validation model. Although the interpretations of the regressors for these PCA models is different than those of a linear regression on the original variables, the lower dimensionality of the data may be desirable as a more simple model which still captures a large portion of the variance in the original data.\n\n\n\n\n[1] R. Bro and A. K. Smilde, “Principal component analysis,” Analytical methods, vol. 6, no. 9, pp. 2812–2831, 2014.\n\n\n[2] R Core Team, “Lm: Fitting linear models.” R Foundation for Statistical Computing, Vienna, Austria, 2023. Available: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/lm. [Accessed: Nov. 08, 2023]\n\n\n[3] Kuhn and Max, “Building predictive models in r using the caret package,” Journal of Statistical Software, vol. 28, no. 5, pp. 1–26, 2008, doi: 10.18637/jss.v028.i05. Available: https://www.jstatsoft.org/index.php/jss/article/view/v028i05"
  },
  {
    "objectID": "discussion.html",
    "href": "discussion.html",
    "title": "7  Discussion",
    "section": "",
    "text": "Principal Component Analysis (PCA) is a foundational multivariate analysis technique that has been widely employed to extract essential information from intricate multivariate datasets and effectively reduce dimensionality. Due to its simplicity and versatility, PCA has become one of the widely adopted tools for understanding and exploring data features in a multivariate dataset. This approach leverages singular value decomposition to restructure datasets and facilitates subsequent statistical analysis. By doing so, PCA simplifies complexity, eliminating superfluous details and redundant information arising from the original dataset. The outcome is a set of principal components that capture most of the variance explaining the original variables. To accomplish this, PCA first converts the dataset into a covariance matrix and then employs singular value decomposition to identify eigenvalues and eigenvectors, representing the loadings of the newly generated principal components. These components can typically account for over 70-80% of the original variables’ variances.\nPCA’s importance in data analysis is underscored by its adaptability to various scenarios and data types, including binary, ordinal, compositional, and discrete data. Moreover, the PCA algorithm has proven effective in reducing the dimensions of vast datasets with high accuracy, significantly improving classification tasks. It plays a crucial role in exploratory data analysis and preliminary data processing, acting as a feature extraction and dimensionality reduction tool. One of its main benefits is its ability to mitigate multicollinearity issues, which can otherwise lead to biased results in statistical analyses.\nDespite its numerous advantages, PCA does come with certain limitations. For instance, it is sensitive to the presence of outliers, which can distort the results and compromise its effectiveness. Furthermore, the new features or components generated through PCA are not readily interpretable, making it challenging to explain their meaning in a straightforward manner. Nonetheless, PCA remains a pivotal technique in data analysis, offering a powerful means to navigate complex datasets and uncover their underlying structures."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "8  References",
    "section": "",
    "text": "[1] M.\nRingnér, “What is principal component analysis?” Nature\nbiotechnology, vol. 26, no. 3, pp. 303–304, 2008.\n\n\n[2] I.\nT. Jolliffe and J. Cadima, “Principal component analysis: A review\nand recent developments,” Philosophical transactions of the\nroyal society A: Mathematical, Physical and Engineering Sciences,\nvol. 374, no. 2065, p. 20150202, 2016.\n\n\n[3] B.\nM. S. Hasan and A. M. Abdulazeez, “A review of principal component\nanalysis algorithm for dimensionality reduction,” Journal of\nSoft Computing and Data Mining, vol. 2, no. 1, pp. 20–30,\n2021.\n\n\n[4] B.\nEveritt and T. Hothorn, An introduction to applied multivariate\nanalysis with r. Springer Science & Business Media, 2011.\n\n\n[5] M.\nGreenacre, P. J. Groenen, T. Hastie, A. I. d’Enza, A. Markos, and E.\nTuzhilina, “Principal component analysis,” Nature\nReviews Methods Primers, vol. 2, no. 1, p. 100, 2022.\n\n\n[6] K.\nPearson, “LIII. On lines and planes of closest fit to systems of\npoints in space,” The London, Edinburgh, and Dublin\nphilosophical magazine and journal of science, vol. 2, no. 11, pp.\n559–572, 1901.\n\n\n[7] R.\nA. Fisher and W. A. Mackenzie, “Studies in crop variation. II. The\nmanurial response of different potato varieties,” The Journal\nof Agricultural Science, vol. 13, no. 3, pp. 311–320, 1923.\n\n\n[8] H.\nHotelling, “Analysis of a complex of statistical variables into\nprincipal components.” Journal of educational\npsychology, vol. 24, no. 6, p. 417, 1933.\n\n\n[9] D.\nEsposito and F. Esposito, Introducing machine learning.\nMicrosoft Press, 2020.\n\n\n[10] M.\nTurk and A. Pentland, “Eigenfaces for recognition,”\nJournal of cognitive neuroscience, vol. 3, no. 1, pp. 71–86,\n1991.\n\n\n[11] S.\nZhang and M. Turk, “Eigenfaces,” Scholarpedia,\nvol. 3, no. 9, p. 4244, 2008.\n\n\n[12] F.\nPedregosa et al., “Scikit-learn: Machine learning in\npython,” the Journal of machine Learning research, vol.\n12, pp. 2825–2830, 2011.\n\n\n[13] J.\nMaindonald and J. Braun, Data analysis and graphics using r: An\nexample-based approach, vol. 10. Cambridge University Press,\n2006.\n\n\n[14] J.\nLever, M. Krzywinski, and N. Altman, “Points of significance:\nPrincipal component analysis,” Nature methods, vol. 14,\nno. 7, pp. 641–643, 2017.\n\n\n[15] F.\nL. Gewers et al., “Principal component analysis: A\nnatural approach to data exploration,” ACM Computing Surveys\n(CSUR), vol. 54, no. 4, pp. 1–34, 2021.\n\n\n[16] J.\nHopcroft and R. Kannan, Foundations of data science.\n2014.\n\n\n[17] “Quarterly dialysis facility care compare\n(QDFCC) report: July 2023.” Centers for Medicare & Medicaid\nServices (CMS). Available: https://data.cms.gov/provider-data/dataset/2fpu-cgbb.\n[Accessed: Oct. 11, 2023]\n\n\n[18] R\nCore Team, “Prcomp, a function of r: A language and environment\nfor statistical computing.” R Foundation for Statistical\nComputing, Vienna, Austria, 2023. Available: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prcomp.\n[Accessed: Oct. 16, 2023]\n\n\n[19] S.\nR. Bennett, “Linear algebra for data science.” 2021.\nAvailable: https://shainarace.github.io/LinearAlgebra/index.html.\n[Accessed: Oct. 16, 2023]\n\n\n[20] D.\nG. Luenberger, Optimization by vector space methods. John Wiley\n& Sons, 1997.\n\n\n[21] S.\nNash Warwick and W. Ford, “Abalone.” UCI\nMachine Learning Repository, 1995.\n\n\n[22] J.\nPagès, Multiple factor analysis by example using r. CRC Press,\n2014.\n\n\n[23] E.\nK. CS, “PCA problem / how to compute principal components / KTU\nmachine learning.” YouTube, 2020. Available: https://youtu.be/MLaJbA82nzk.\n[Accessed: Nov. 01, 2023]\n\n\n[24] F.\nChumney, “PCA, EFA, CFA,” pp. 2–3, 6, Sep., 2012,\nAvailable: https://www.westga.edu/academics/research/vrc/assets/docs/PCA-EFA-CFA_EssayChumney_09282012.pdf\n\n\n[25] H.\nAbdi and L. J. Williams, “Principal component analysis,”\nWIREs Computational Statistics, vol. 2, no. 4, pp. 433–459,\n2010, doi: https://doi.org/10.1002/wics.101.\nAvailable: https://wires.onlinelibrary.wiley.com/doi/abs/10.1002/wics.101\n\n\n[26] R\nCore Team, “Lm: Fitting linear models.” R Foundation for\nStatistical Computing, Vienna, Austria, 2023. Available: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/lm.\n[Accessed: Nov. 08, 2023]\n\n\n[27] Kuhn and Max, “Building predictive models\nin r using the caret package,” Journal of Statistical\nSoftware, vol. 28, no. 5, pp. 1–26, 2008, doi: 10.18637/jss.v028.i05.\nAvailable: https://www.jstatsoft.org/index.php/jss/article/view/v028i05\n\n\n[28] R.\nBro and A. K. Smilde, “Principal component analysis,”\nAnalytical methods, vol. 6, no. 9, pp. 2812–2831, 2014."
  }
]