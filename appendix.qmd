# Appendix {.unnumbered}

This is an appendix of all code used in this project. Click the code buttons under each header to display the code chunk. You may also return to each chapter and view each individual code chunk by clicking the code buttons.

# Chapter 3: Examples

## Libraries
```{r, eval = FALSE}
# Load Libraries for Chapter 3
library(factoextra) #fviz_eig; PCA plots
library(tidyverse)  #rename; pipe operator
library(kableExtra) #kable_paper; table formatting
library(corrplot) #for plotting the correlation matrix
library(summarytools) #produces summary stats
```

## Code
```{r, eval = FALSE}
# Import Example Data
data = data.frame(Student = 1:4, BasicStats=c(4,8,13,7), AdvancedStats=c(11,4,5,14))
#dim(data)

# Structure of Data
# check variable types which matters in PCA 
# summary(data) #details about variable scales and missing values
kbl(data, align = 'l', caption = "Dataframe structure") %>%
  kable_paper("hover")

# Based on Info from Summary: handle missing values and exclude categorical variable
# na.omit(data) No missing values here
data_sample = data[,-c(1)] #exclude categorical variable

# Run PCA
data_pca = prcomp(data_sample, scale = TRUE)

# Summary of Analysis
sum_pca = as.data.frame(summary(data_pca)$importance)
kbl(sum_pca, align= 'l', caption = "Importance of components") %>%
  kable_paper("hover")

# Elements of PCA Object (all outputs of PCA analysis)
# names(data_pca)

# sdev:standard deviation
# rotation: eigenvectors (loadings per variable within each PC)
# center: mean of the original variable
# scale: standard deviations of the original variable
# x: principal component values/scores

# Scree Plot of Variance
fviz_eig(data_pca,
         addlabels = TRUE)
# Biplot with Default Settings
fviz_pca_biplot(data_pca, repel = TRUE)

# Load dataset
abalone <- read.csv('./abalone/abalone.csv')

data_desc = descr(abalone, plain.ascii = FALSE, headings = FALSE) # descriptive statistics for the dataset

data_desc %>%
  kbl(align= 'l') %>%
  kable_paper("hover")

# Select only the numeric variables 
abalone = select_if(abalone, is.numeric)

# Standardization of numerical features
abalone_sc <- scale(abalone, center = TRUE, scale = TRUE)

sc_sum = summary(abalone_sc)

kbl(sc_sum, align= 'l') %>%
  kable_paper("hover")

# Plot a boxplot to visualize potential outliers
par(mar=c(4, 8, 4, 4))
boxplot(abalone_sc, col = "steelblue", main = "Visualization of scaled and centered data", horizontal = TRUE, las = 1)

outs = colSums(abalone_sc > 3 | abalone_sc < -3)

kbl(outs, col.names = ('Outliers'), align = 'l') %>%
  kable_paper("hover")

# Calculate correlations and round to 2 digits
abalone_corr <- cor(abalone_sc)
corrplot(abalone_corr, method="number")

# Apply PCA using prcomp()
abalone_pca <- prcomp(abalone_sc)

sum_pca = as.data.frame(summary(abalone_pca)$importance)

kbl(sum_pca, align= 'l', caption = "Importance of components") %>%
  kable_paper("hover")

# Principal Component scores vector
pc_scores <- abalone_pca$x

# Std Deviation of Components
component_sdev <- abalone_pca$sdev

# Eigenvector or Loadings
eigenvector <- abalone_pca$rotation

# Mean of variables
component_mean <- abalone_pca$center 

# Scaling factor of Variables
component_scale <- abalone_pca$scale

# Proportion of variance explained by each PC
variance_explained <- component_sdev^2 / sum(component_sdev^2)

# Cumulative proportion of variance explained
cumulative_variance_explained <- cumsum(variance_explained)

# Retain components that explain a percentage of the variance
num_components <- which(cumulative_variance_explained >= 0.92)[1]

# Select the desired number of principal components
selected_pcs <- pc_scores[, 1:num_components]

# Access the loadings for the first two principal components
loadings_first_two_components <- eigenvector[, 1:2]

# Print the loadings for the first two principal components

kbl(loadings_first_two_components, align= 'l', caption = "Loadings for the first two principal components") %>%
  kable_paper("hover")

fviz_eig(abalone_pca, addlabels = TRUE)

fviz_pca_biplot(abalone_pca, label = "var", alpha.ind = "contrib", col.var = "blue", repel = TRUE)

# Contributions of variables to PC1
pc2_contribution <- fviz_contrib(abalone_pca, choice = "var", axes = 1, top = 20)

# Modify the theme to rotate X-axis labels to 90 degrees
pc2_contribution +
  theme(
    axis.text.x = element_text(angle = 0),
    plot.title = element_text(hjust = 0)  # horizontal justification
  ) +
  coord_flip() +
  labs(title = "Contribution of Variables to PC1",
       y = "Percentage Contribution",
       x = "",
       caption = "PC1 explains 83.9% of the variance") +
  scale_y_continuous(labels = scales::percent_format(scale = 1,
                                                     accuracy = 1))

# Contributions of variables to PC2
pc2_contribution <- fviz_contrib(abalone_pca, choice = "var", axes = 2, top = 12)

# Modify the theme to rotate X-axis labels to 90 degrees
pc2_contribution +
  theme(
    axis.text.x = element_text(angle = 0),
    plot.title = element_text(hjust = 0)  # horizontal justification
  ) +
  coord_flip() +
  labs(title = "Contribution of Variables to PC2",
       y = "Percentage Contribution",
       x = "",
       caption = "PC2 explains 8.7% of the variance") +
  scale_y_continuous(labels = scales::percent_format(scale = 1,
                                                     accuracy = 1))
```

# Chapter 4: Dataset

## Libraries
```{r, eval = FALSE}
# Load libraries
library(tidyverse)
library(summarytools)
library(kableExtra)
library(DataExplorer)
```

## Code
```{r, eval = FALSE}
# Load the dataset
data <- read.csv('./dataset/DFC_STATE.csv')

# Make a working copy
train_data <- data

# Constant seed
my_seed = 95

# Rename the variables
train_data <- rename(train_data,
        better_transfusion = Transfusions..Better.than.expected..STATE.,
        expected_transfusion = Transfusions..As.expected..STATE.,
        worse_transfusion = Transfusions..Worse.than.expected..STATE.,
        better_infection = Infection..Better.than.expected..STATE.,
        expected_infection = Infection..As.expected..STATE.,
        worse_infection = Infection..Worse.than.expected..STATE.,
        Kt_v_1.2 = Percentage.of.adult.HD.patients.with.Kt.V..1.2,
        Kt_v_1.7 = Percentage.Of.Adult.PD.Patients.With.Kt.V..1.7,
        pedriatic_Kt_v_1.2 = Percentage.Of.Pediatric.HD.Patients.With.Kt.V..1.2,
        pediatric_Kt_v_1.8 = Percentage.Of.Pediatric.PD.Patients.With.Kt.V..1.8,
        pediatric_nPCR = Percentage.Of.Pediatric.HD.Patients.With.nPCR.In.Use,
        better_fistula = Fistula.Rate...Better.Than.Expected..STATE.,
        expected_fistula = Fistula.Rate...As.Expected..STATE.,
        worse_fistula = Fistula.Rate...Worse.Than.Expected..STATE.,
        long_term_catheter = Percentage.Of.Adult.Patients.With.Long.Term.Catheter.In.Use ,
        "hypercalcemia_calcium > 10.2Mg" = Percentage.Of.Adult.Patients.With.Hypercalcemia..Serum.Calcium.Greater.Than.10.2.Mg.dL.,
        "phosphorus < 3.5Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Less.Than.3.5.Mg.dL,
        "phosphorus (3.5 - 4.5) Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Between.3.5.4.5.Mg.dL,
        "phosphorus (4.6 - 5.5) Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Between.4.6.5.5.Mg.dL,
        "phosphorus (5.6 - 7) Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Between.5.6.7.0.Mg.dL,
        "phosphorus > 7Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Greater.Than.7.0.Mg.dL,
        better_hospitalization = Hospitalizations..Better.Than.Expected..STATE.,
        expected_hospitalization = Hospitalizations..As.Expected..STATE.,
        worse_hospitalization = Hospitalizations..Worse.Than.Expected..STATE.,
        better_hospital_readmission = Hospital.Readmission...Better.Than.Expected..STATE.,
        expected_hospital_readmission = Hospital.Readmission...As.Expected..STATE.,
        worse_hospital_readmission = Hospital..Readmission...Worse.Than.Expected..STATE.,
        better_survival = Survival..Better.Than.Expected..STATE.,
        expected_survival = Survival..As.Expected..STATE.,
        worse_survival = Survival..Worse.Than.Expected..STATE.,
        incident_transplant_waitlist_better = Incident.Patients.Transplant.Waitlisting..Better.Than.Expected..STATE.,
        incident_transplant_waitlist_expected = Incident.Patients.Transplant.Waitlisting...As.Expected..STATE.,
        incident_transplant_waitlist_worse = Incident.Patients.Transplant.Waitlisting...Worse.Than.Expected..STATE.,
        prevalent_transplant_waitlist_better = Prevalent.Patients.Transplant.Waitlisting..Better.Than.Expected..STATE.,
        prevalent_transplant_waitlist_expected = Prevalent.Patients.Transplant.Waitlisting...As.Expected..STATE.,
        prevalent_transplant_waitlist_worse = Prevalent.Patients.Transplant.Waitlisting...Worse.Than.Expected..STATE.,
        Hgb_10g = Percentage.Of.Patients.With.Hgb.10.g.dL,
        Hgb_12g = Percentage.of.patients.with.Hgb.12.g.dL
        )

data_desc = descr(train_data, plain.ascii = FALSE, headings = FALSE) # descriptive statistics for the dataset

kbl(data_desc, align= 'l') %>%
  kable_paper("hover")

# Plot Missing values
plot_intro(train_data)
plot_missing(train_data, missing_only = TRUE, group = list("Good (0.05)" = 0.05, "OK (0.4)" = 0.4, Bad = 0.8, Remove = 1),)

total_missing <- sum(is.na(train_data))
# cat("Count Missing Values in Entire Data Frame: ", total_missing)

# Count the number of missing values in each column
no_missing_values_df <- data.frame("Missing_Values" = colSums(is.na(train_data)))

# Table format
kbl(no_missing_values_df) %>%
  kable_paper("hover", full_width = F)

# Visualize of data in histograms
plot_histogram(train_data[, 18:25], ncol = 2L)

# Plot qq
plot_qq(train_data[, 19:30], ncol = 2L)

# Remove categorical columns
train_data$State <- NULL

# Impute missing values with the median
for (col in colnames(train_data)) {
  median_value <- median(train_data[[col]], na.rm = TRUE)
  train_data[[col]] <- ifelse(is.na(train_data[[col]]), median_value, train_data[[col]])
}

# Round all variables
train_data <- round(train_data, digits = 0)

# Count the number of missing values in each column
no_missing_values_df <- data.frame("Missing_Values" = colSums(is.na(train_data)))

Type = sapply(train_data, typeof)
no_missing_values_df <- cbind(no_missing_values_df, Type)

# table format
kbl(no_missing_values_df) %>%
  kable_paper("hover", full_width = F)
```

# Chapter 5: Analysis

## Libraries
```{r, eval = FALSE}
# Load libraries
library(tidyverse)  #rename; pipe operator
library(olsrr)      #ols_plot_resid_lev; outliers, leverage plot
library(caret)      #findCorrelation
library(kableExtra) #kable_paper; table formatting
library(sjPlot)     #tab_model; format linear regression results
library(factoextra) #fviz_eig; PCA plots
library(caTools)    #sample.split
library(ggcorrplot) #ggcorrplot; correlation graph
library(pls)        #pcr; PC regression
library(Metrics)    #mae; calculate MAE, MSE, RMSE, R^2
```

## Code
```{r, eval = FALSE}
# Load dataset
train_original <- read.csv('dataset/DFC_STATE.csv')

# Make a working copy
train_data <- train_original

# Constant seed
my_seed = 95

# Rename Variables
train_data <- rename(train_data,
                      better_transfusion = Transfusions..Better.than.expected..STATE.,
        expected_transfusion = Transfusions..As.expected..STATE.,
        worse_transfusion = Transfusions..Worse.than.expected..STATE.,
        better_infection = Infection..Better.than.expected..STATE.,
        expected_infection = Infection..As.expected..STATE.,
        worse_infection = Infection..Worse.than.expected..STATE.,
        Kt_v_1.2 = Percentage.of.adult.HD.patients.with.Kt.V..1.2,
        Kt_v_1.7 = Percentage.Of.Adult.PD.Patients.With.Kt.V..1.7,
        pedriatic_Kt_v_1.2 = Percentage.Of.Pediatric.HD.Patients.With.Kt.V..1.2,
        pediatric_Kt_v_1.8 = Percentage.Of.Pediatric.PD.Patients.With.Kt.V..1.8,
        pediatric_nPCR = Percentage.Of.Pediatric.HD.Patients.With.nPCR.In.Use,
        better_fistula = Fistula.Rate...Better.Than.Expected..STATE.,
        expected_fistula = Fistula.Rate...As.Expected..STATE.,
        worse_fistula = Fistula.Rate...Worse.Than.Expected..STATE.,
        long_term_catheter = Percentage.Of.Adult.Patients.With.Long.Term.Catheter.In.Use ,
        "hypercalcemia_calcium > 10.2Mg" = Percentage.Of.Adult.Patients.With.Hypercalcemia..Serum.Calcium.Greater.Than.10.2.Mg.dL.,
        "phosphorus < 3.5Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Less.Than.3.5.Mg.dL,
        "phosphorus (3.5 - 4.5) Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Between.3.5.4.5.Mg.dL,
        "phosphorus (4.6 - 5.5) Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Between.4.6.5.5.Mg.dL,
        "phosphorus (5.6 - 7) Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Between.5.6.7.0.Mg.dL,
        "phosphorus > 7Mg" = Percentage.Of.Adult.Patients.With.Serum.Phosphorus.Greater.Than.7.0.Mg.dL,
        better_hospitalization = Hospitalizations..Better.Than.Expected..STATE.,
        expected_hospitalization = Hospitalizations..As.Expected..STATE.,
        worse_hospitalization = Hospitalizations..Worse.Than.Expected..STATE.,
        better_hospital_readmission = Hospital.Readmission...Better.Than.Expected..STATE.,
        expected_hospital_readmission = Hospital.Readmission...As.Expected..STATE.,
        worse_hospital_readmission = Hospital..Readmission...Worse.Than.Expected..STATE.,
        better_survival = Survival..Better.Than.Expected..STATE.,
        expected_survival = Survival..As.Expected..STATE.,
        worse_survival = Survival..Worse.Than.Expected..STATE.,
        incident_transplant_waitlist_better = Incident.Patients.Transplant.Waitlisting..Better.Than.Expected..STATE.,
        incident_transplant_waitlist_expected = Incident.Patients.Transplant.Waitlisting...As.Expected..STATE.,
        incident_transplant_waitlist_worse = Incident.Patients.Transplant.Waitlisting...Worse.Than.Expected..STATE.,
        prevalent_transplant_waitlist_better = Prevalent.Patients.Transplant.Waitlisting..Better.Than.Expected..STATE.,
        prevalent_transplant_waitlist_expected = Prevalent.Patients.Transplant.Waitlisting...As.Expected..STATE.,
        prevalent_transplant_waitlist_worse = Prevalent.Patients.Transplant.Waitlisting...Worse.Than.Expected..STATE.,
        "Hgb 10g"= Percentage.Of.Patients.With.Hgb.10.g.dL,
        "Hgb 12g" = Percentage.of.patients.with.Hgb.12.g.dL
        )

# Impute Missing Values
# Count the number of missing values in each column
colSums(is.na(train_data))

# Remove categorical columns
train_data$State <- NULL

# Impute missing values with the mean
for (col in colnames(train_data)) {
  mean_value <- mean(train_data[[col]], na.rm = TRUE)
  train_data[[col]] <- ifelse(is.na(train_data[[col]]), mean_value,     train_data[[col]])
}

# Remove rows with missing values
train_data <- na.omit(train_data)

# Count the number of missing values in each column
colSums(is.na(train_data))

# Get duplicated rows
train_data[duplicated(train_data), ]

# Summary statistics of the data
summary(train_data)

# Summary statistics of categorical variables
summary(train_data[, sapply(train_data, is.character)])

# Check dataset structure
str(train_data)

# Find the index position of the target feature 
target_name <- "expected_survival"
target_index <- grep(target_name, 
                     colnames(train_data))

# Standardization Numerical Features
train_data_sc <- scale(train_data[, -target_index])

# Plot a boxplot to visualize potential outliers
boxplot(train_data, main = "Outliers Detection",
        col = "steelblue")

# Dependent Variable outliers
train_data %>% 
  ggplot(aes(y=expected_survival)) +
  geom_boxplot(fill="steelblue", alpha=0.75) + 
  xlab("Expected Survival")+
  ylab("")+
  ggtitle("Dependent Variable Outliers")

set.seed(my_seed)

# Fit regression model
ordinary_model <- lm(expected_survival ~ ., data = train_data)

# Print the model summary
summary(ordinary_model)

# Residual Diagnostics
ols_plot_resid_lev(ordinary_model)

# No Outliers subset
no_outliers_df <- slice(train_data, -c(56))

set.seed(my_seed)

# Fit regression model
no_outliers_model <- lm(expected_survival ~ ., data = no_outliers_df)

# Print the model summary
summary(no_outliers_model)

# Residual Diagnostics
ols_plot_resid_lev(no_outliers_model)

# Calculate correlations and round to 2 digits
corr_matrix <- cor(train_data_sc)
corr_matrix <- round(corr_matrix, digits = 2)

# Print names of highly correlated features; threshold > 0.30
high <- findCorrelation(corr_matrix, cutoff = 0.30, names = TRUE)

# Create a data frame with an index column
high_corr_df <- data.frame(
  Count = 1:length(high),
  Feature = high
)

# table format
kbl(high_corr_df, caption = "Highly Correlated Features") %>%
  kable_paper("hover")

corrplot::corrplot(corr_matrix, type = "full", tl.pos = "n")

set.seed(my_seed)

# Fit a multiple linear regression model
full_model <- lm(expected_survival ~ ., data = train_data)

# Print a summary of the regression model
tab_model(full_model, title = "Full Model Regression", 
          string.p="P-value", string.stat = "T-score",
          string.se = "Std. Error",
          string.resp = "Response",
          string.ci = "Conf Int.",
          show.se=T, show.stat = T,
           CSS = list(
             css.depvarhead = 'font-weight: bold; text-align: left;',
             css.summary = 'color: #10759B; font-weight: bold;'
           ))

# Apply PCA using prcomp()
data_pca <- prcomp(train_data_sc, center = TRUE, scale. = TRUE)
pca_summ <- summary(data_pca)$importance

# Transpose the matrix
transposed_pca_summ <- t(pca_summ)

# table format
kbl(transposed_pca_summ, caption = "Pricipal Components Analysis",
    digits = 4) %>%
  kable_paper("hover")

# Principal Component scores vector
pc_scores <- data_pca$x

# Std Deviation of Components
component_sdev <- data_pca$sdev

# Eigenvector, or Loadings
pc_loadings <- data_pca$rotation

# Mean of variables
component_mean <- data_pca$center 

# Scaling factor of Variables
component_scale <- data_pca$scale

# Access the loadings for the first two principal components
loadings_first_two_components <- pc_loadings[, 1:2]

# Print the loadings for the first two principal components
# print(loadings_first_two_components)

# table format
kbl(loadings_first_two_components, 
    caption = "Loadings of First Two Principal Components",
    digits = 4) %>%
  kable_paper("hover")

# Proportion of variance explained by each PC
variance_explained <- component_sdev^2 / sum(component_sdev^2)

# Cumulative proportion of variance explained
cumulative_variance_explained <- cumsum(variance_explained)

# Create a data frame with an index column
cumulative_variance_explained_df <- data.frame(
  Pincipal_Component = 1:length(cumulative_variance_explained),
  Cumulative_Variance_Explained = cumulative_variance_explained
)

# Create a kable table with an index column
kbl(cumulative_variance_explained_df, align = "cl",
    caption = "PCA: Cumulative Variance Explained",
    digits = 4) %>%
  kable_paper("hover")

# Retain components that explain a percentage of the variance
num_components <- which(cumulative_variance_explained >= 0.86)[1]

# Select the desired number of principal components
selected_pcs <- pc_scores[, 1:num_components]

# table format
kbl(selected_pcs, caption = "Components Explaining 86% Variance",
    digits = 4) %>%
  kable_paper("hover", full_width = F)

fviz_eig(data_pca, addlabels = TRUE)

fviz_pca_biplot(data_pca, 
                geom = c("point", "arrow"),
                geom.var = "arrow")

# Control variable colors using their contributions
fviz_pca_var(data_pca, col.var = "contrib",
   gradient.cols = c("white", "blue", "red"),
   geom.var = "arrow",
   ggtheme = theme_minimal())

# Contributions of variables to PC1
pc2_contribution <- fviz_contrib(data_pca, choice = "var", axes = 1, top = 20)

# Modify the theme to rotate X-axis labels to 90 degrees
pc2_contribution +
  theme(
    axis.text.x = element_text(angle = 0),
    plot.title = element_text(hjust = 0)  # horizontal justification
  ) +
  coord_flip() +
  labs(title = "Contribution of Variables to PC1",
       y = "Percentage Contribution",
       x = "",
       caption = "PC1 explains 40.8% variance") +
  scale_y_continuous(labels = scales::percent_format(scale = 1,
                                                     accuracy = 1))


# Contributions of variables to PC2
pc2_contribution <- fviz_contrib(data_pca, choice = "var", axes = 2, top = 12)

# Modify the theme to rotate X-axis labels to 90 degrees
pc2_contribution +
  theme(
    axis.text.x = element_text(angle = 0),
    plot.title = element_text(hjust = 0)  # horizontal justification
  ) +
  coord_flip() +
  labs(title = "Contribution of Variables to PC2",
       y = "Percentage Contribution",
       x = "",
       caption = "PC2 explains 9.5% variance") +
  scale_y_continuous(labels = scales::percent_format(scale = 1,
                                                     accuracy = 1))

# reproducible random sampling
set.seed(my_seed)  
 
# Create Target y-variable for the training set
y <- train_data$expected_survival  
# Split the data into training and test sets 
split <- sample.split(y, SplitRatio = 0.7) 
training_set <- subset(train_data, split == TRUE) 
test_set <- subset(train_data, split == FALSE) 

# Feature Scaling: Standardization
# Perform centering and scaling on the training and test sets
sc <- preProcess(training_set[, -target_index], 
                 method = c("center", "scale"))
training_set[, -target_index] <- predict(
  sc, training_set[, -target_index])
test_set[, -target_index] <- predict(sc, test_set[, -target_index])

# Perform Principal Component Analysis (PCA) preprocessing on the training data
pca <- preProcess(training_set[, -target_index], 
                  method = 'pca', pcaComp = 8)

# Apply PCA transformation to original training set
training_set <- predict(pca, training_set)

# Reorder columns, moving the dependent feature index to the end
training_set <- training_set[c(2:9, 1)]

# Apply PCA transformation to original test set
test_set <- predict(pca, test_set)

# Reorder columns, moving the dependent feature index to the end
test_set <- test_set[c(2:9, 1)]

#PRESS & Predicted $R^2$ Functions
#PRESS - predicted residual sums of squares
PRESS <- function(linear.model) {
  # calculate the predictive residuals
  pr <- residuals(linear.model)/(1-lm.influence(linear.model)$hat)
  # calculate the PRESS
  PRESS <- sum(pr^2)
  
  return(PRESS)
}

pred_r_squared <- function(linear.model) {
  # Use anova() to get the sum of squares for the linear model
  lm.anova <- anova(linear.model)
  # Calculate the total sum of squares
  tss <- sum(lm.anova$'Sum Sq')
  # Calculate the predictive R^2
  pred.r.squared <- 1-PRESS(linear.model)/(tss)
  
  return(pred.r.squared)
}

# reproducible random sampling
set.seed(my_seed)

# Fit a multiple linear regression model
pca_full_model <- lm(expected_survival ~ ., data = training_set)

# Print a summary of the regression model
tab_model(pca_full_model, title = "8 Principal Components Regression",
          string.p="P-value", string.stat = "T-score",
          string.se = "Std. Error",
          string.resp = "Response",
          string.ci = "Conf Int.",
          show.se=T, show.stat = T,
          CSS = list(
             css.depvarhead = 'font-weight: bold; text-align: left;',
             css.summary = 'color: #10759B; font-weight: bold;'
           ))

# Calculate PRESS
# cat("PRESS: ", PRESS(pca_full_model), "\n")
PRESS_8pc <- PRESS(pca_full_model)
# Calculate predicted R^2
# cat("Predicted R^2: ", pred_r_squared(pca_full_model), "\n")
R2_8pcs <- pred_r_squared(pca_full_model)

predict_8pc <- cbind(PRESS_8pc, R2_8pcs)
# Print PRESS, predicted R^2
# table format
kbl(predict_8pc, caption = "8 Principal Components Prediction Metrics",
    digits = 4) %>%
  kable_paper("hover", full_width = F)

# Visual of Principal Components un-correlation
corr_matrix <- cor(training_set)
ggcorrplot(corr_matrix)

# Create a subset with 2 principal components
significant_pcs = c(1,2,9)
train_pca <- training_set[, significant_pcs]
test_pca <- test_set[, significant_pcs]

# reproducible random sampling
set.seed(my_seed)

# Fit a multiple linear regression model
reg_model <- lm(expected_survival ~ ., 
                data = train_pca)

# Print a summary of the regression model
tab_model(reg_model, title = "2 Principal Components Regression",
          string.p="P-value", string.stat = "T-score",
          string.se = "Std. Error",
          string.resp = "Response",
          string.ci = "Conf Int.",
          show.se=T, show.stat = T,
          CSS = list(
             css.depvarhead = 'font-weight: bold; text-align: left;',
             css.summary = 'color: #10759B; font-weight: bold;'
           ))

# Calculate PRESS
# cat("PRESS: ", PRESS(reg_model), "\n")
PRESS_2pc <- PRESS(reg_model)

# Calculate predicted R^2
# cat("Predicted R^2: ", pred_r_squared(reg_model), "\n")
R2_2pc <- pred_r_squared(reg_model)

# Print 2PC prediction results
predict_2pc <- cbind(PRESS_2pc, R2_2pc)

# table format
kbl(predict_2pc, caption = "2 Principal Components Prediction Metrics",
    digits = 4) %>%
  kable_paper("hover", full_width = F)

# reproducible random sampling
set.seed(my_seed)

y = train_pca$expected_survival

# fit PCR
pcr_model <- pcr(y ~ PC1+PC2, data=train_pca, validation="CV")
print(pcr_model)

# table format
# kbl(pcr_model$residuals, caption = "PCA Residuals",
#     digits = 4) %>%
#   kable_paper("hover", full_width = F)

# reproducible random sampling
set.seed(my_seed)

# Cross-validation with n folds
k_10 <- trainControl(method = "cv", number = 10)

# training the model 
model_cv <- train(expected_survival ~ ., 
                  data = train_pca,
                  method = "lm",
                  trControl = k_10)

# Print Model Performance
print(model_cv)

# Metrics
cv_results = model_cv$results
kbl(cv_results, caption = "PCA: Cross-Validation Metrics",
    digits = 4) %>%
  kable_paper("hover", full_width = F)

# Find the index position of the target feature
pred_target_index <- grep(target_name, 
                     colnames(test_pca))
#cat("Target Feature Index =", pred_target_index)

# Create Predicted Target Feature (y-test) 
y_test <- test_pca[pred_target_index]

# Predictions using the Cross-Validation model
y_pred = predict(model_cv, newdata = test_pca[, -pred_target_index])

# Prediction Results from y_predictions
y_pred <- round(y_pred, digits = 0)

# Transform y_test from data frame to numeric
y_test <- as.numeric(unlist(y_test))

prediction_comparison <- cbind(y_pred, y_test)
# table format
kbl(prediction_comparison) %>%
  kable_paper("hover", full_width = F)

# Calculate Mean Absolute Error (MAE)
MAE_value <- mae(y_pred, y_test)
#cat("MAE =", mae_value)

# Calculate MSE
MSE_predict <- mean((y_pred - y_test)^2)
#cat("\nMSE =", mse_predict)

# Calculate RMSE
RMSE_predict <- sqrt(mean((y_pred - y_test)^2))
#cat("\nRMSE =", rmse_predict)

# Calculate R-squared (R^2)
predicted_R2 <- 1 - sum((y_test - y_pred)^2) / 
  sum((y_test - mean(y_test))^2)
# cat("\nPredicted R^2 =", predicted_r2)

prediction_metrics_df <- cbind(MAE_value, MSE_predict,
                               RMSE_predict, predicted_R2)
# table format
kbl(prediction_metrics_df, digits = 4) %>%
  kable_paper("hover", full_width = F)
```